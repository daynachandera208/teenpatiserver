import type { DatabaseType, QueryRunner } from "./QueryRunner";
import type { DataSource, Transaction } from 'loopback-datasource-juggler';
export declare function createLoopBackQueryRunner(datasource: DataSource, transaction?: Transaction): LoopbackQueryRunner;
export interface LoopbackQueryRunner extends QueryRunner {
    readonly database: DatabaseType;
    readonly datasource: DataSource;
    readonly connectorName: string;
    transaction?: Transaction;
}
export declare abstract class LoopBackAbstractQueryRunner implements LoopbackQueryRunner {
    readonly database: DatabaseType;
    readonly datasource: DataSource;
    readonly connectorName: string;
    transaction?: Transaction;
    constructor(database: DatabaseType, datasource: DataSource, transaction?: Transaction);
    useDatabase(database: DatabaseType): void;
    getNativeRunner(): DataSource;
    execute<RESULT>(fn: (connection: unknown, transaction?: unknown) => Promise<RESULT>): Promise<RESULT>;
    executeSelectOneRow(query: string, params?: any[]): Promise<any>;
    executeSelectManyRows(query: string, params?: any[]): Promise<any[]>;
    executeSelectOneColumnOneRow(query: string, params?: any[]): Promise<any>;
    executeSelectOneColumnManyRows(query: string, params?: any[]): Promise<any[]>;
    abstract executeInsert(query: string, params?: any[]): Promise<number>;
    abstract executeInsertReturningLastInsertedId(query: string, params?: any[]): Promise<any>;
    abstract executeInsertReturningMultipleLastInsertedId(query: string, params?: any[]): Promise<any>;
    abstract executeUpdate(query: string, params?: any[]): Promise<number>;
    abstract executeDelete(query: string, params?: any[]): Promise<number>;
    executeProcedure(query: string, params?: any[]): Promise<void>;
    executeFunction(query: string, params?: any[]): Promise<any>;
    executeBeginTransaction(): Promise<void>;
    executeCommit(): Promise<void>;
    executeRollback(): Promise<void>;
    executeDatabaseSchemaModification(query: string, params?: any[]): Promise<void>;
    abstract addParam(params: any[], value: any): string;
    addOutParam(_params: any[], _name: string): string;
    createResolvedPromise<RESULT>(result: RESULT): Promise<RESULT>;
    protected query(query: string, params?: any[]): Promise<any>;
}
export declare class LoopBackMySqlQueryRunner extends LoopBackAbstractQueryRunner {
    constructor(datasource: DataSource, transaction?: Transaction);
    useDatabase(database: DatabaseType): void;
    executeInsert(query: string, params?: any[]): Promise<number>;
    executeInsertReturningLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeInsertReturningMultipleLastInsertedId(_query: string, _params?: any[]): Promise<any>;
    executeUpdate(query: string, params?: any[]): Promise<number>;
    executeDelete(query: string, params?: any[]): Promise<number>;
    addParam(params: any[], value: any): string;
}
export declare class LoopBackOracleQueryRunner extends LoopBackAbstractQueryRunner {
    constructor(datasource: DataSource, transaction?: Transaction);
    executeInsert(query: string, params?: any[]): Promise<number>;
    executeInsertReturningLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeInsertReturningMultipleLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeUpdate(query: string, params?: any[]): Promise<number>;
    executeDelete(query: string, params?: any[]): Promise<number>;
    addParam(params: any[], value: any): string;
    addOutParam(params: any[], name: string): string;
}
export declare class LoopBackPostgreSqlQueryRunner extends LoopBackAbstractQueryRunner {
    constructor(datasource: DataSource, transaction?: Transaction);
    executeInsert(query: string, params?: any[]): Promise<number>;
    executeInsertReturningLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeInsertReturningMultipleLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeUpdate(query: string, params?: any[]): Promise<number>;
    executeDelete(query: string, params?: any[]): Promise<number>;
    addParam(params: any[], value: any): string;
    protected guessInsertRowCount(query: string): number;
}
export declare class LoopBackSqlServerQueryRunner extends LoopBackAbstractQueryRunner {
    constructor(datasource: DataSource, transaction?: Transaction);
    executeInsert(query: string, params?: any[]): Promise<number>;
    executeInsertReturningLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeInsertReturningMultipleLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeUpdate(query: string, params?: any[]): Promise<number>;
    executeDelete(query: string, params?: any[]): Promise<number>;
    addParam(params: any[], value: any): string;
}
