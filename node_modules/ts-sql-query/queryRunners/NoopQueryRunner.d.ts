import type { PromiseProvider } from "../utils/PromiseProvider";
import type { QueryRunner, DatabaseType } from "./QueryRunner";
export interface NoopQueryRunnerConfig {
    database?: DatabaseType;
    promise?: PromiseProvider;
}
export declare class NoopQueryRunner implements QueryRunner {
    readonly database: DatabaseType;
    readonly promise: PromiseProvider;
    constructor(databaseOrConfig?: DatabaseType | NoopQueryRunnerConfig);
    useDatabase(database: DatabaseType): void;
    getNativeRunner(): unknown;
    execute<RESULT>(fn: (connection: unknown, transaction?: unknown) => Promise<RESULT>): Promise<RESULT>;
    executeSelectOneRow(_query: string, _params?: any[]): Promise<any>;
    executeSelectManyRows(_query: string, _params?: any[]): Promise<any[]>;
    executeSelectOneColumnOneRow(_query: string, _params?: any[]): Promise<any>;
    executeSelectOneColumnManyRows(_query: string, _params?: any[]): Promise<any[]>;
    executeInsert(_query: string, _params?: any[]): Promise<number>;
    executeInsertReturningLastInsertedId(_query: string, _params?: any[]): Promise<any>;
    executeInsertReturningMultipleLastInsertedId(_query: string, _params?: any[]): Promise<any>;
    executeUpdate(_query: string, _params?: any[]): Promise<number>;
    executeDelete(_query: string, _params?: any[]): Promise<number>;
    executeProcedure(_query: string, _params?: any[]): Promise<void>;
    executeFunction(_query: string, _params?: any[]): Promise<any>;
    executeBeginTransaction(): Promise<void>;
    executeCommit(): Promise<void>;
    executeRollback(): Promise<void>;
    executeDatabaseSchemaModification(_query: string, _params?: any[]): Promise<void>;
    addParam(params: any[], value: any): string;
    addOutParam(params: any[], name: string): string;
    createResolvedPromise<RESULT>(result: RESULT): Promise<RESULT>;
}
