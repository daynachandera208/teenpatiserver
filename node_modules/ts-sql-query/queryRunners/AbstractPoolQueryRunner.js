"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractPoolQueryRunner = void 0;
class AbstractPoolQueryRunner {
    constructor() {
        this.transactionLevel = 0;
    }
    execute(fn) {
        return this.getQueryRunner().then(queryRunner => queryRunner.execute(fn)).finally(() => this.releaseIfNeeded());
    }
    executeSelectOneRow(query, params = []) {
        return this.getQueryRunner().then(queryRunner => queryRunner.executeSelectOneRow(query, params)).finally(() => this.releaseIfNeeded());
    }
    executeSelectManyRows(query, params = []) {
        return this.getQueryRunner().then(queryRunner => queryRunner.executeSelectManyRows(query, params)).finally(() => this.releaseIfNeeded());
    }
    executeSelectOneColumnOneRow(query, params = []) {
        return this.getQueryRunner().then(queryRunner => queryRunner.executeSelectOneColumnOneRow(query, params)).finally(() => this.releaseIfNeeded());
    }
    executeSelectOneColumnManyRows(query, params = []) {
        return this.getQueryRunner().then(queryRunner => queryRunner.executeSelectOneColumnManyRows(query, params)).finally(() => this.releaseIfNeeded());
    }
    executeInsert(query, params = []) {
        return this.getQueryRunner().then(queryRunner => queryRunner.executeInsert(query, params)).finally(() => this.releaseIfNeeded());
    }
    executeInsertReturningLastInsertedId(query, params = []) {
        return this.getQueryRunner().then(queryRunner => queryRunner.executeInsertReturningLastInsertedId(query, params)).finally(() => this.releaseIfNeeded());
    }
    executeInsertReturningMultipleLastInsertedId(query, params = []) {
        return this.getQueryRunner().then(queryRunner => queryRunner.executeInsertReturningMultipleLastInsertedId(query, params)).finally(() => this.releaseIfNeeded());
    }
    executeUpdate(query, params = []) {
        return this.getQueryRunner().then(queryRunner => queryRunner.executeUpdate(query, params)).finally(() => this.releaseIfNeeded());
    }
    executeDelete(query, params = []) {
        return this.getQueryRunner().then(queryRunner => queryRunner.executeDelete(query, params)).finally(() => this.releaseIfNeeded());
    }
    executeProcedure(query, params = []) {
        return this.getQueryRunner().then(queryRunner => queryRunner.executeProcedure(query, params)).finally(() => this.releaseIfNeeded());
    }
    executeFunction(query, params = []) {
        return this.getQueryRunner().then(queryRunner => queryRunner.executeFunction(query, params)).finally(() => this.releaseIfNeeded());
    }
    executeBeginTransaction() {
        if (this.transactionLevel <= 0) {
            this.transactionLevel = 1;
            return this.createResolvedPromise(undefined);
        }
        else {
            return this.getQueryRunner().then(queryRunner => queryRunner.executeBeginTransaction()).then(() => {
                this.transactionLevel++;
            });
        }
    }
    executeCommit() {
        if (this.transactionLevel <= 0) {
            throw new Error('You are not in a transaction');
        }
        else if (this.currentQueryRunner) {
            this.transactionLevel--;
            return this.currentQueryRunner.executeCommit().finally(() => this.releaseIfNeeded());
        }
        return this.createResolvedPromise(undefined);
    }
    executeRollback() {
        if (this.transactionLevel <= 0) {
            throw new Error('You are not in a transaction');
        }
        else if (this.currentQueryRunner) {
            this.transactionLevel--;
            return this.currentQueryRunner.executeRollback().finally(() => this.releaseIfNeeded());
        }
        return this.createResolvedPromise(undefined);
    }
    executeDatabaseSchemaModification(query, params = []) {
        return this.getQueryRunner().then(queryRunner => queryRunner.executeDatabaseSchemaModification(query, params)).finally(() => this.releaseIfNeeded());
    }
    getQueryRunner() {
        if (!this.currentQueryRunner) {
            return this.createQueryRunner().then(queryRunner => {
                this.currentQueryRunner = queryRunner;
                if (this.transactionLevel > 0) {
                    return this.currentQueryRunner.executeBeginTransaction().then(() => {
                        return queryRunner;
                    });
                }
                return queryRunner;
            });
        }
        return this.createResolvedPromise(this.currentQueryRunner);
    }
    releaseIfNeeded() {
        if (this.transactionLevel <= 0 && this.currentQueryRunner) {
            this.releaseQueryRunner(this.currentQueryRunner);
            this.currentQueryRunner = undefined;
        }
    }
}
exports.AbstractPoolQueryRunner = AbstractPoolQueryRunner;
//# sourceMappingURL=AbstractPoolQueryRunner.js.map