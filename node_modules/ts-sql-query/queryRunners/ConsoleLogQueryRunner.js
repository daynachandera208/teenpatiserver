"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleLogQueryRunner = void 0;
const ChainedQueryRunner_1 = require("./ChainedQueryRunner");
class ConsoleLogQueryRunner extends ChainedQueryRunner_1.ChainedQueryRunner {
    constructor(queryRunner) {
        super(queryRunner);
    }
    executeSelectOneRow(query, params = []) {
        console.log('executeSelectOneRow:', query, params);
        return this.queryRunner.executeSelectOneRow(query, params);
    }
    executeSelectManyRows(query, params = []) {
        console.log('executeSelectManyRows:', query, params);
        return this.queryRunner.executeSelectManyRows(query, params);
    }
    executeSelectOneColumnOneRow(query, params = []) {
        console.log('executeSelectOneColumnOneRow:', query, params);
        return this.queryRunner.executeSelectOneColumnOneRow(query, params);
    }
    executeSelectOneColumnManyRows(query, params = []) {
        console.log('executeSelectOneColumnManyRows:', query, params);
        return this.queryRunner.executeSelectOneColumnManyRows(query, params);
    }
    executeInsert(query, params = []) {
        console.log('executeInsert:', query, params);
        return this.queryRunner.executeInsert(query, params);
    }
    executeInsertReturningLastInsertedId(query, params = []) {
        console.log('executeInsertReturningLastInsertedId:', query, params);
        return this.queryRunner.executeInsertReturningLastInsertedId(query, params);
    }
    executeInsertReturningMultipleLastInsertedId(query, params = []) {
        console.log('executeInsertReturningMultipleLastInsertedId:', query, params);
        return this.queryRunner.executeInsertReturningMultipleLastInsertedId(query, params);
    }
    executeUpdate(query, params = []) {
        console.log('executeUpdate:', query, params);
        return this.queryRunner.executeUpdate(query, params);
    }
    executeDelete(query, params = []) {
        console.log('executeDelete:', query, params);
        return this.queryRunner.executeDelete(query, params);
    }
    executeProcedure(query, params = []) {
        console.log('executeProcedure:', query, params);
        return this.queryRunner.executeProcedure(query, params);
    }
    executeFunction(query, params = []) {
        console.log('executeFunction:', query, params);
        return this.queryRunner.executeFunction(query, params);
    }
    executeBeginTransaction() {
        console.log('executeBeginTransaction:', undefined, undefined);
        return this.queryRunner.executeBeginTransaction();
    }
    executeCommit() {
        console.log('executeCommit:', undefined, undefined);
        return this.queryRunner.executeCommit();
    }
    executeRollback() {
        console.log('executeRollback:', undefined, undefined);
        return this.queryRunner.executeRollback();
    }
    executeDatabaseSchemaModification(query, params = []) {
        console.log('executeDatabaseSchemaModification:', query, params);
        return this.queryRunner.executeDatabaseSchemaModification(query, params);
    }
}
exports.ConsoleLogQueryRunner = ConsoleLogQueryRunner;
//# sourceMappingURL=ConsoleLogQueryRunner.js.map