"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sqlite3QueryRunner = void 0;
class Sqlite3QueryRunner {
    constructor(connection) {
        this.connection = connection;
        this.database = 'sqlite';
    }
    useDatabase(database) {
        if (database !== 'sqlite') {
            throw new Error('Unsupported database: ' + database + '. Sqlite3QueryRunner only supports sqlite databases');
        }
    }
    getNativeRunner() {
        return this.connection;
    }
    execute(fn) {
        return fn(this.connection);
    }
    executeSelectOneRow(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.all(query, params, function (error, rows) {
                if (error) {
                    reject(error);
                }
                else {
                    if (rows.length > 1) {
                        reject(new Error('Too many rows, expected only zero or one row'));
                        return;
                    }
                    resolve(rows[0]);
                }
            });
        });
    }
    executeSelectManyRows(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.all(query, params, function (error, rows) {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(rows);
                }
            });
        });
    }
    executeSelectOneColumnOneRow(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.all(query, params, function (error, rows) {
                if (error) {
                    reject(error);
                }
                else {
                    if (rows.length > 1) {
                        reject(new Error('Too many rows, expected only zero or one row'));
                        return;
                    }
                    const row = rows[0];
                    if (row) {
                        const columns = Object.getOwnPropertyNames(row);
                        if (columns.length > 1) {
                            reject(Error('Too many columns, expected only one column'));
                            return;
                        }
                        resolve(row[columns[0]]); // Value in the row of the first column without care about the name
                        return;
                    }
                    resolve(undefined);
                }
            });
        });
    }
    executeSelectOneColumnManyRows(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.all(query, params, function (error, rows) {
                if (error) {
                    reject(error);
                }
                else {
                    const result = [];
                    for (let i = 0, length = rows.length; i < length; i++) {
                        const row = rows[i];
                        const columns = Object.getOwnPropertyNames(row);
                        if (columns.length > 1) {
                            reject(new Error('Too many columns, expected only one column'));
                            return;
                        }
                        result.push(row[columns[0]]); // Value in the row of the first column without care about the name
                    }
                    resolve(result);
                }
            });
        });
    }
    executeInsert(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.run(query, params, function (error) {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(this.changes);
                }
            });
        });
    }
    executeInsertReturningLastInsertedId(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.run(query, params, function (error) {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(this.lastID);
                }
            });
        });
    }
    executeInsertReturningMultipleLastInsertedId(_query, _params = []) {
        throw new Error('Unsupported executeInsertReturningLastInsertedId for this database');
    }
    executeUpdate(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.run(query, params, function (error) {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(this.changes);
                }
            });
        });
    }
    executeDelete(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.run(query, params, function (error) {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(this.changes);
                }
            });
        });
    }
    executeProcedure(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.run(query, params, function (error) {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(undefined);
                }
            });
        });
    }
    executeFunction(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.all(query, params, function (error, rows) {
                if (error) {
                    reject(error);
                }
                else {
                    if (rows.length > 1) {
                        reject(new Error('Too many rows, expected only zero or one row'));
                        return;
                    }
                    const row = rows[0];
                    if (row) {
                        const columns = Object.getOwnPropertyNames(row);
                        if (columns.length > 1) {
                            reject(Error('Too many columns, expected only one column'));
                            return;
                        }
                        resolve(row[columns[0]]); // Value in the row of the first column without care about the name
                        return;
                    }
                    resolve(undefined);
                }
            });
        });
    }
    executeBeginTransaction() {
        return new Promise((resolve, reject) => {
            this.connection.run('begin', function (error) {
                if (error) {
                    reject(error);
                }
                else {
                    resolve();
                }
            });
        });
    }
    executeCommit() {
        return new Promise((resolve, reject) => {
            this.connection.run('commit', function (error) {
                if (error) {
                    reject(error);
                }
                else {
                    resolve();
                }
            });
        });
    }
    executeRollback() {
        return new Promise((resolve, reject) => {
            this.connection.run('rollback', function (error) {
                if (error) {
                    reject(error);
                }
                else {
                    resolve();
                }
            });
        });
    }
    executeDatabaseSchemaModification(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.run(query, params, function (error) {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(undefined);
                }
            });
        });
    }
    addParam(params, value) {
        params.push(value);
        return '?';
    }
    addOutParam(_params, _name) {
        throw new Error('Unsupported output parameters');
    }
    createResolvedPromise(result) {
        return Promise.resolve(result);
    }
}
exports.Sqlite3QueryRunner = Sqlite3QueryRunner;
//# sourceMappingURL=Sqlite3QueryRunner.js.map