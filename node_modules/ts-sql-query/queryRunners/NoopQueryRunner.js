"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoopQueryRunner = void 0;
class NoopQueryRunner {
    constructor(databaseOrConfig = 'noopDB') {
        if (typeof databaseOrConfig === 'string') {
            databaseOrConfig = { database: databaseOrConfig };
        }
        this.database = databaseOrConfig.database || 'noopDB';
        this.promise = databaseOrConfig.promise || Promise;
    }
    useDatabase(database) {
        // @ts-ignore
        this.database = database;
    }
    getNativeRunner() {
        return null;
    }
    execute(fn) {
        return fn(null);
    }
    executeSelectOneRow(_query, _params = []) {
        return this.promise.resolve(undefined);
    }
    executeSelectManyRows(_query, _params = []) {
        return this.promise.resolve([]);
    }
    executeSelectOneColumnOneRow(_query, _params = []) {
        return this.promise.resolve(undefined);
    }
    executeSelectOneColumnManyRows(_query, _params = []) {
        return this.promise.resolve([]);
    }
    executeInsert(_query, _params = []) {
        return this.promise.resolve(0);
    }
    executeInsertReturningLastInsertedId(_query, _params = []) {
        return this.promise.resolve(undefined);
    }
    executeInsertReturningMultipleLastInsertedId(_query, _params = []) {
        return this.promise.resolve([]);
    }
    executeUpdate(_query, _params = []) {
        return this.promise.resolve(0);
    }
    executeDelete(_query, _params = []) {
        return this.promise.resolve(0);
    }
    executeProcedure(_query, _params = []) {
        return this.promise.resolve();
    }
    executeFunction(_query, _params = []) {
        return this.promise.resolve(undefined);
    }
    executeBeginTransaction() {
        return this.promise.resolve();
    }
    executeCommit() {
        return this.promise.resolve();
    }
    executeRollback() {
        return this.promise.resolve();
    }
    executeDatabaseSchemaModification(_query, _params = []) {
        return this.promise.resolve();
    }
    addParam(params, value) {
        const index = params.length;
        let result;
        switch (this.database) {
            case 'mariaDB':
                result = '?';
                break;
            case 'mySql':
                result = '?';
                break;
            case 'noopDB':
                result = '$' + index;
                break;
            case 'oracle':
                result = ':' + index;
                break;
            case 'postgreSql':
                result = '$' + (index + 1);
                break;
            case 'sqlite':
                result = '?';
                break;
            case 'sqlServer':
                result = '@' + index;
                break;
            default:
                throw new Error('Unknown database ' + this.database);
        }
        params.push(value);
        return result;
    }
    addOutParam(params, name) {
        const index = params.length;
        params.push({ out_param_with_name: name });
        return ':' + index;
    }
    createResolvedPromise(result) {
        return this.promise.resolve(result);
    }
}
exports.NoopQueryRunner = NoopQueryRunner;
//# sourceMappingURL=NoopQueryRunner.js.map