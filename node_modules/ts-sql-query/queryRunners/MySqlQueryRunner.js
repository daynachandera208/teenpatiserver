"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MySqlQueryRunner = void 0;
class MySqlQueryRunner {
    constructor(connection, database = 'mySql') {
        this.connection = connection;
        this.database = database;
    }
    useDatabase(database) {
        if (database !== 'mariaDB' && database !== 'mySql') {
            throw new Error('Unsupported database: ' + database + '. MySqlQueryRunner only supports mySql or mariaDB databases');
        }
        else {
            // @ts-ignore
            this.database = database;
        }
    }
    getNativeRunner() {
        return this.connection;
    }
    execute(fn) {
        return fn(this.connection);
    }
    executeSelectOneRow(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.query(query, params, (error, results) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (results.length > 1) {
                        reject(new Error('Too many rows, expected only zero or one row'));
                        return;
                    }
                    resolve(results[0]);
                }
            });
        });
    }
    executeSelectManyRows(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.query(query, params, (error, results) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(results);
                }
            });
        });
    }
    executeSelectOneColumnOneRow(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.query(query, params, (error, results) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (results.length > 1) {
                        reject(new Error('Too many rows, expected only zero or one row'));
                        return;
                    }
                    const row = results[0];
                    if (row) {
                        const columns = Object.getOwnPropertyNames(row);
                        if (columns.length > 1) {
                            reject(Error('Too many columns, expected only one column'));
                            return;
                        }
                        resolve(row[columns[0]]); // Value in the row of the first column without care about the name
                        return;
                    }
                    resolve(undefined);
                }
            });
        });
    }
    executeSelectOneColumnManyRows(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.query(query, params, (error, results) => {
                if (error) {
                    reject(error);
                }
                else {
                    const result = [];
                    for (let i = 0, length = results.length; i < length; i++) {
                        const row = results[i];
                        const columns = Object.getOwnPropertyNames(row);
                        if (columns.length > 1) {
                            reject(new Error('Too many columns, expected only one column'));
                            return;
                        }
                        result.push(row[columns[0]]); // Value in the row of the first column without care about the name
                    }
                    resolve(result);
                }
            });
        });
    }
    executeInsert(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.query(query, params, (error, results) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(results.affectedRows);
                }
            });
        });
    }
    executeInsertReturningLastInsertedId(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.query(query, params, (error, results) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(results.insertId);
                }
            });
        });
    }
    executeInsertReturningMultipleLastInsertedId(_query, _params = []) {
        throw new Error('Unsupported executeInsertReturningLastInsertedId for this database');
    }
    executeUpdate(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.query(query, params, (error, results) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(results.affectedRows);
                }
            });
        });
    }
    executeDelete(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.query(query, params, (error, results) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(results.affectedRows);
                }
            });
        });
    }
    executeProcedure(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.query(query, params, (error) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(undefined);
                }
            });
        });
    }
    executeFunction(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.query(query, params, (error, results) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (results.length > 1) {
                        reject(new Error('Too many rows, expected only zero or one row'));
                        return;
                    }
                    const row = results[0];
                    if (row) {
                        const columns = Object.getOwnPropertyNames(row);
                        if (columns.length > 1) {
                            reject(Error('Too many columns, expected only one column'));
                            return;
                        }
                        resolve(row[columns[0]]); // Value in the row of the first column without care about the name
                        return;
                    }
                    resolve(undefined);
                }
            });
        });
    }
    executeBeginTransaction() {
        return new Promise((resolve, reject) => {
            this.connection.beginTransaction((error) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve();
                }
            });
        });
    }
    executeCommit() {
        return new Promise((resolve, reject) => {
            this.connection.commit((error) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve();
                }
            });
        });
    }
    executeRollback() {
        return new Promise((resolve, reject) => {
            this.connection.rollback((error) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve();
                }
            });
        });
    }
    executeDatabaseSchemaModification(query, params = []) {
        return new Promise((resolve, reject) => {
            this.connection.query(query, params, (error) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(undefined);
                }
            });
        });
    }
    addParam(params, value) {
        params.push(value);
        return '?';
    }
    addOutParam(_params, _name) {
        throw new Error('Unsupported output parameters');
    }
    createResolvedPromise(result) {
        return Promise.resolve(result);
    }
}
exports.MySqlQueryRunner = MySqlQueryRunner;
//# sourceMappingURL=MySqlQueryRunner.js.map