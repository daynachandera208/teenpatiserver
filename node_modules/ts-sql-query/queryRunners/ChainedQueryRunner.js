"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainedQueryRunner = void 0;
class ChainedQueryRunner {
    constructor(queryRunner) {
        this.queryRunner = queryRunner;
    }
    get database() {
        return this.queryRunner.database;
    }
    useDatabase(database) {
        return this.queryRunner.useDatabase(database);
    }
    getNativeRunner() {
        return this.queryRunner.getNativeRunner();
    }
    execute(fn) {
        return this.execute(fn);
    }
    executeSelectOneRow(query, params = []) {
        return this.queryRunner.executeSelectOneRow(query, params);
    }
    executeSelectManyRows(query, params = []) {
        return this.queryRunner.executeSelectManyRows(query, params);
    }
    executeSelectOneColumnOneRow(query, params = []) {
        return this.queryRunner.executeSelectOneColumnOneRow(query, params);
    }
    executeSelectOneColumnManyRows(query, params = []) {
        return this.queryRunner.executeSelectOneColumnManyRows(query, params);
    }
    executeInsert(query, params = []) {
        return this.queryRunner.executeInsert(query, params);
    }
    executeInsertReturningLastInsertedId(query, params = []) {
        return this.queryRunner.executeInsertReturningLastInsertedId(query, params);
    }
    executeInsertReturningMultipleLastInsertedId(query, params = []) {
        return this.queryRunner.executeInsertReturningMultipleLastInsertedId(query, params);
    }
    executeUpdate(query, params = []) {
        return this.queryRunner.executeUpdate(query, params);
    }
    executeDelete(query, params = []) {
        return this.queryRunner.executeDelete(query, params);
    }
    executeProcedure(query, params = []) {
        return this.queryRunner.executeProcedure(query, params);
    }
    executeFunction(query, params = []) {
        return this.queryRunner.executeFunction(query, params);
    }
    executeBeginTransaction() {
        return this.queryRunner.executeBeginTransaction();
    }
    executeCommit() {
        return this.queryRunner.executeCommit();
    }
    executeRollback() {
        return this.queryRunner.executeRollback();
    }
    executeDatabaseSchemaModification(query, params = []) {
        return this.queryRunner.executeDatabaseSchemaModification(query, params);
    }
    addParam(params, value) {
        return this.queryRunner.addParam(params, value);
    }
    addOutParam(params, name) {
        return this.queryRunner.addOutParam(params, name);
    }
    createResolvedPromise(result) {
        return this.queryRunner.createResolvedPromise(result);
    }
}
exports.ChainedQueryRunner = ChainedQueryRunner;
//# sourceMappingURL=ChainedQueryRunner.js.map