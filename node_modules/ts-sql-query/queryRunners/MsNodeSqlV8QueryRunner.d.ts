import type { QueryRunner, DatabaseType } from "./QueryRunner";
export interface Connection {
    query(sql: string, params?: any[], cb?: QueryCb): Query;
    beginTransaction(cb?: StatusCb): void;
    commit(cb?: StatusCb): void;
    rollback(cb?: StatusCb): void;
}
export interface Query {
    on(name: string, cb: SubmittedEventCb): void;
    on(name: string, cb: EventCb): void;
    on(name: string, cb: EventColumnCb): void;
}
export interface QueryCb {
    (err?: Error, rows?: any[], more?: boolean): void;
}
export interface StatusCb {
    (err?: Error): void;
}
export interface EventCb {
    (data: any): void;
}
export interface SubmittedEventCb {
    (sql: string, params: any[]): void;
}
export interface EventColumnCb {
    (colIndex: number, data: any, more: boolean): void;
}
export declare class MsNodeSqlV8QueryRunner<CONNECTION extends Connection> implements QueryRunner {
    readonly database: DatabaseType;
    readonly connection: CONNECTION;
    constructor(connection: CONNECTION);
    useDatabase(database: DatabaseType): void;
    getNativeRunner(): CONNECTION;
    execute<RESULT>(fn: (connection: unknown, transaction?: unknown) => Promise<RESULT>): Promise<RESULT>;
    executeSelectOneRow(query: string, params?: any[]): Promise<any>;
    executeSelectManyRows(query: string, params?: any[]): Promise<any[]>;
    executeSelectOneColumnOneRow(query: string, params?: any[]): Promise<any>;
    executeSelectOneColumnManyRows(query: string, params?: any[]): Promise<any[]>;
    executeInsert(query: string, params?: any[]): Promise<number>;
    executeInsertReturningLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeInsertReturningMultipleLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeUpdate(query: string, params?: any[]): Promise<number>;
    executeDelete(query: string, params?: any[]): Promise<number>;
    executeProcedure(query: string, params?: any[]): Promise<void>;
    executeFunction(query: string, params?: any[]): Promise<any>;
    executeBeginTransaction(): Promise<void>;
    executeCommit(): Promise<void>;
    executeRollback(): Promise<void>;
    executeDatabaseSchemaModification(query: string, params?: any[]): Promise<void>;
    addParam(params: any[], value: any): string;
    addOutParam(_params: any[], _name: string): string;
    createResolvedPromise<RESULT>(result: RESULT): Promise<RESULT>;
}
