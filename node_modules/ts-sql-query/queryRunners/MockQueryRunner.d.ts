import type { PromiseProvider } from "../utils/PromiseProvider";
import type { QueryRunner, DatabaseType } from "./QueryRunner";
export declare type QueryType = 'selectOneRow' | 'selectManyRows' | 'selectOneColumnOneRow' | 'selectOneColumnManyRows' | 'insert' | 'insertReturningLastInsertedId' | 'insertReturningMultipleLastInsertedId' | 'update' | 'delete' | 'executeProcedure' | 'executeFunction' | 'beginTransaction' | 'commit' | 'rollback' | 'executeDatabaseSchemaModification';
export declare type QueryExecutor = (type: QueryType, query: string, params: any[], index: number) => any;
export interface MockQueryRunnerConfig {
    database?: DatabaseType;
    promise?: PromiseProvider;
}
export declare class MockQueryRunner implements QueryRunner {
    private count;
    readonly queryExecutor: QueryExecutor;
    readonly database: DatabaseType;
    readonly promise: PromiseProvider;
    constructor(queryExecutor: QueryExecutor, databaseOrConfig?: DatabaseType | MockQueryRunnerConfig);
    useDatabase(database: DatabaseType): void;
    getNativeRunner(): unknown;
    execute<RESULT>(fn: (connection: unknown, transaction?: unknown) => Promise<RESULT>): Promise<RESULT>;
    executeSelectOneRow(query: string, params?: any[]): Promise<any>;
    executeSelectManyRows(query: string, params?: any[]): Promise<any[]>;
    executeSelectOneColumnOneRow(query: string, params?: any[]): Promise<any>;
    executeSelectOneColumnManyRows(query: string, params?: any[]): Promise<any[]>;
    executeInsert(query: string, params?: any[]): Promise<number>;
    executeInsertReturningLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeInsertReturningMultipleLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeUpdate(query: string, params?: any[]): Promise<number>;
    executeDelete(query: string, params?: any[]): Promise<number>;
    executeProcedure(query: string, params?: any[]): Promise<void>;
    executeFunction(query: string, params?: any[]): Promise<any>;
    executeBeginTransaction(): Promise<void>;
    executeCommit(): Promise<void>;
    executeRollback(): Promise<void>;
    executeDatabaseSchemaModification(query: string, params?: any[]): Promise<void>;
    addParam(params: any[], value: any): string;
    addOutParam(params: any[], name: string): string;
    createResolvedPromise<RESULT>(result: RESULT): Promise<RESULT>;
}
