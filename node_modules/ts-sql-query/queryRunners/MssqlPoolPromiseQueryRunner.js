"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MssqlPoolPromiseQueryRunner = void 0;
const AbstractPoolQueryRunner_1 = require("./AbstractPoolQueryRunner");
const MssqlPoolQueryRunner_1 = require("./MssqlPoolQueryRunner");
class MssqlPoolPromiseQueryRunner extends AbstractPoolQueryRunner_1.AbstractPoolQueryRunner {
    constructor(promisePool) {
        super();
        this.promisePool = promisePool;
        this.database = 'sqlServer';
    }
    useDatabase(database) {
        if (database !== 'sqlServer') {
            throw new Error('Unsupported database: ' + database + '. MssqlPoolPromiseQueryRunner only supports sqlServer databases');
        }
    }
    getNativeRunner() {
        return this.promisePool;
    }
    addParam(params, value) {
        const index = params.length;
        params.push(value);
        return '@' + index;
    }
    addOutParam(_params, _name) {
        throw new Error('Unsupported output parameters');
    }
    createResolvedPromise(result) {
        return Promise.resolve(result);
    }
    createQueryRunner() {
        return this.promisePool.then(pool => new MssqlPoolQueryRunner_1.MssqlPoolQueryRunner(pool));
    }
    releaseQueryRunner(_queryRunner) {
        // Do nothing
    }
}
exports.MssqlPoolPromiseQueryRunner = MssqlPoolPromiseQueryRunner;
//# sourceMappingURL=MssqlPoolPromiseQueryRunner.js.map