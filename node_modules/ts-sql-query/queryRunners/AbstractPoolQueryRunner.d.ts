import type { QueryRunner, DatabaseType } from "./QueryRunner";
export declare abstract class AbstractPoolQueryRunner implements QueryRunner {
    private currentQueryRunner?;
    private transactionLevel;
    abstract readonly database: DatabaseType;
    abstract useDatabase(database: DatabaseType): void;
    abstract getNativeRunner(): unknown;
    execute<RESULT>(fn: (connection: unknown, transaction?: unknown) => Promise<RESULT>): Promise<RESULT>;
    executeSelectOneRow(query: string, params?: any[]): Promise<any>;
    executeSelectManyRows(query: string, params?: any[]): Promise<any[]>;
    executeSelectOneColumnOneRow(query: string, params?: any[]): Promise<any>;
    executeSelectOneColumnManyRows(query: string, params?: any[]): Promise<any[]>;
    executeInsert(query: string, params?: any[]): Promise<number>;
    executeInsertReturningLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeInsertReturningMultipleLastInsertedId(query: string, params?: any[]): Promise<any[]>;
    executeUpdate(query: string, params?: any[]): Promise<number>;
    executeDelete(query: string, params?: any[]): Promise<number>;
    executeProcedure(query: string, params?: any[]): Promise<void>;
    executeFunction(query: string, params?: any[]): Promise<any>;
    executeBeginTransaction(): Promise<void>;
    executeCommit(): Promise<void>;
    executeRollback(): Promise<void>;
    executeDatabaseSchemaModification(query: string, params?: any[]): Promise<void>;
    abstract addParam(params: any[], value: any): string;
    abstract addOutParam(params: any[], name: string): string;
    abstract createResolvedPromise<RESULT>(result: RESULT): Promise<RESULT>;
    private getQueryRunner;
    private releaseIfNeeded;
    protected abstract createQueryRunner(): Promise<QueryRunner>;
    protected abstract releaseQueryRunner(queryRunner: QueryRunner): void;
}
