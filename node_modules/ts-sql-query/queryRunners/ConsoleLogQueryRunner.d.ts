import type { QueryRunner } from "./QueryRunner";
import { ChainedQueryRunner } from "./ChainedQueryRunner";
export declare class ConsoleLogQueryRunner<T extends QueryRunner> extends ChainedQueryRunner<T> {
    constructor(queryRunner: T);
    executeSelectOneRow(query: string, params?: any[]): Promise<any>;
    executeSelectManyRows(query: string, params?: any[]): Promise<any[]>;
    executeSelectOneColumnOneRow(query: string, params?: any[]): Promise<any>;
    executeSelectOneColumnManyRows(query: string, params?: any[]): Promise<any[]>;
    executeInsert(query: string, params?: any[]): Promise<number>;
    executeInsertReturningLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeInsertReturningMultipleLastInsertedId(query: string, params?: any[]): Promise<any>;
    executeUpdate(query: string, params?: any[]): Promise<number>;
    executeDelete(query: string, params?: any[]): Promise<number>;
    executeProcedure(query: string, params?: any[]): Promise<void>;
    executeFunction(query: string, params?: any[]): Promise<any>;
    executeBeginTransaction(): Promise<void>;
    executeCommit(): Promise<void>;
    executeRollback(): Promise<void>;
    executeDatabaseSchemaModification(query: string, params?: any[]): Promise<void>;
}
