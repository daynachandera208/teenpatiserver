"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProxyTypeAdapter = exports.WithViewImpl = void 0;
const ColumnImpl_1 = require("../internal/ColumnImpl");
const symbols_1 = require("../utils/symbols");
const TypeAdapter_1 = require("../TypeAdapter");
const values_1 = require("../expressions/values");
class WithViewImpl {
    constructor(name, selectData, optionalRule) {
        // @ts-ignore
        this.__type = 'with';
        this.__name = name;
        this.__selectData = selectData;
        this.__optionalRule = optionalRule;
        const thiz = this;
        const columns = selectData.__columns;
        for (const property in columns) {
            const column = columns[property];
            const columnPrivate = values_1.__getValueSourcePrivate(column);
            let valueType = columnPrivate.__valueType;
            let typeAdapter = columnPrivate.__typeAdapter;
            if (typeAdapter instanceof TypeAdapter_1.CustomBooleanTypeAdapter) {
                // Avoid treat the column as a custom boolean
                typeAdapter = new ProxyTypeAdapter(typeAdapter);
            }
            const withColumn = new ColumnImpl_1.ColumnImpl(this, property, valueType, typeAdapter);
            withColumn.__isOptional = columnPrivate.__isResultOptional(optionalRule);
            thiz[property] = withColumn;
        }
    }
    as(as) {
        const result = new WithViewImpl(this.__name, this.__selectData, this.__optionalRule);
        result.__as = as;
        result.__originalWith = this;
        return result;
    }
    forUseInLeftJoin() {
        return this;
    }
    forUseInLeftJoinAs(as) {
        return this.as(as);
    }
    __addWiths(withs) {
        if (this.__originalWith) {
            this.__originalWith.__addWiths(withs);
        }
        else if (!withs.includes(this)) {
            withs.push(this);
        }
    }
}
exports.WithViewImpl = WithViewImpl;
class ProxyTypeAdapter {
    constructor(typeAdapter) {
        this.typeAdapter = typeAdapter;
    }
    transformValueFromDB(value, type, next) {
        return this.typeAdapter.transformValueFromDB(value, type, next);
    }
    transformValueToDB(value, type, next) {
        return this.typeAdapter.transformValueToDB(value, type, next);
    }
}
exports.ProxyTypeAdapter = ProxyTypeAdapter;
//# sourceMappingURL=WithViewImpl.js.map