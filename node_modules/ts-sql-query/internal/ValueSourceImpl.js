"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregateFunctions1or2ValueSource = exports.AggregateFunctions1ValueSource = exports.AggregateFunctions0ValueSource = exports.FragmentValueSource = exports.SequenceValueSource = exports.NoopValueSource = exports.SqlOperation2ValueSourceIfValueOrIgnore = exports.SqlOperation2ValueSource = exports.SqlOperation1ValueSourceIfValueOrIgnore = exports.SqlOperationValueSourceIfValueAlwaysNoop = exports.SqlOperation1ValueSourceIfValueOrNoop = exports.SqlOperation1NotOptionalValueSource = exports.SqlOperationValueWhenNullValueSource = exports.SqlOperation1ValueSource = exports.SqlOperationIsNullValueSource = exports.SqlOperation0ValueSource = exports.SqlOperationAsOptionalValueSource = exports.SqlOperationConstValueSource = exports.SqlOperationStatic1ValueSource = exports.SqlOperationStaticBooleanValueSource = exports.SqlOperationStatic0ValueSource = exports.ValueSourceImpl = void 0;
const symbols_1 = require("../utils/symbols");
const ITableOrView_1 = require("../utils/ITableOrView");
const values_1 = require("../expressions/values");
class ValueSourceImpl {
    constructor(valueType, typeAdapter) {
        this.__valueType = valueType;
        this.__typeAdapter = typeAdapter;
    }
    __toSqlForCondition(sqlBuilder, params) {
        return this.__toSql(sqlBuilder, params);
    }
    __isResultOptional(rule) {
        if (this.__resultIsOptionalCache === undefined) {
            this.__resultIsOptionalCache = this.__resultIsOptional(rule);
        }
        return this.__resultIsOptionalCache;
    }
    __addWiths(_withs) {
        // Do nothing
    }
    isConstValue() {
        return false;
    }
    getConstValue() {
        throw new Error('You are trying to access to the const value when the expression is not const');
    }
    asOptional() {
        return new SqlOperationAsOptionalValueSource(this);
    }
    // SqlComparator0
    isNull() {
        return condition(new SqlOperationIsNullValueSource('_isNull', this, 'boolean', this.__typeAdapter));
    }
    isNotNull() {
        return condition(new SqlOperationIsNullValueSource('_isNotNull', this, 'boolean', this.__typeAdapter));
    }
    // SqlComparator1
    equalsIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_equals', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    equals(value) {
        return condition(new SqlOperation1ValueSource('_equals', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notEqualsIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notEquals', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notEquals(value) {
        return condition(new SqlOperation1ValueSource('_notEquals', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    isIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_is', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    is(value) {
        return condition(new SqlOperation1NotOptionalValueSource('_is', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    isNotIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_isNot', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    isNot(value) {
        return condition(new SqlOperation1NotOptionalValueSource('_isNot', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    asString() {
        return this;
    }
    equalsInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_equalsInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    equalsInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_equalsInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notEqualsInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notEqualsInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notEqualsInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_notEqualsInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    smallerIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_smaller', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    smaller(value) {
        return condition(new SqlOperation1ValueSource('_smaller', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    largerIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_larger', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    larger(value) {
        return condition(new SqlOperation1ValueSource('_larger', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    smallAsIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_smallAs', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    smallAs(value) {
        return condition(new SqlOperation1ValueSource('_smallAs', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    largeAsIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_largeAs', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    largeAs(value) {
        return condition(new SqlOperation1ValueSource('_largeAs', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    inIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_in', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    in(value) {
        return condition(new SqlOperation1ValueSource('_in', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notInIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notIn', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notIn(value) {
        return condition(new SqlOperation1ValueSource('_notIn', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    inN(...value) {
        return condition(new SqlOperation1ValueSource('_in', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notInN(...value) {
        return condition(new SqlOperation1ValueSource('_notIn', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    likeIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_like', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    like(value) {
        return condition(new SqlOperation1ValueSource('_like', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notLikeIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notLike', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notLike(value) {
        return condition(new SqlOperation1ValueSource('_notLike', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    likeInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_likeInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    likeInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_likeInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notLikeInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notLikeInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notLikeInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_notLikeInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    startWithIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_startWith', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    startWith(value) {
        return condition(new SqlOperation1ValueSource('_startWith', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notStartWithIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notStartWith', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notStartWith(value) {
        return condition(new SqlOperation1ValueSource('_notStartWith', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    endWithIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_endWith', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    endWith(value) {
        return condition(new SqlOperation1ValueSource('_endWith', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notEndWithIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notEndWith', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notEndWith(value) {
        return condition(new SqlOperation1ValueSource('_notEndWith', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    startWithInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_startWithInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    startWithInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_startWithInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notStartWithInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notStartWithInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notStartWithInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_notStartWithInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    endWithInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_endWithInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    endWithInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_endWithInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notEndWithInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notEndWithInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notEndWithInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_notEndWithInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    containsIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_contains', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    contains(value) {
        return condition(new SqlOperation1ValueSource('_contains', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notContainsIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notContains', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notContains(value) {
        return condition(new SqlOperation1ValueSource('_notContains', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    containsInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_containsInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    containsInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_containsInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notContainsInsensitiveIfValue(value) {
        return condition(new SqlOperation1ValueSourceIfValueOrNoop('_notContainsInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    notContainsInsensitive(value) {
        return condition(new SqlOperation1ValueSource('_notContainsInsensitive', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    // SqlComparator2
    between(value, value2) {
        return condition(new SqlOperation2ValueSource('_between', this, value, value2, 'boolean', getTypeAdapter2(this, value)));
    }
    notBetween(value, value2) {
        return condition(new SqlOperation2ValueSource('_notBetween', this, value, value2, 'boolean', getTypeAdapter2(this, value)));
    }
    // SqlFunctionStatic: never used here
    // SqlFunction0
    // Boolean
    negate() {
        return condition(new SqlOperation0ValueSource('_negate', this, 'boolean', this.__typeAdapter));
    }
    // String
    lower() {
        return new SqlOperation0ValueSource('_lower', this, this.__valueType, this.__typeAdapter);
    }
    upper() {
        return new SqlOperation0ValueSource('_upper', this, this.__valueType, this.__typeAdapter);
    }
    length() {
        return new SqlOperation0ValueSource('_length', this, 'int', this.__typeAdapter);
    }
    trim() {
        return new SqlOperation0ValueSource('_trim', this, this.__valueType, this.__typeAdapter);
    }
    ltrim() {
        return new SqlOperation0ValueSource('_ltrim', this, this.__valueType, this.__typeAdapter);
    }
    rtrim() {
        return new SqlOperation0ValueSource('_rtrim', this, this.__valueType, this.__typeAdapter);
    }
    reverse() {
        return new SqlOperation0ValueSource('_reverse', this, this.__valueType, this.__typeAdapter);
    }
    // Number functions
    asDouble() {
        return new SqlOperation0ValueSource('_asDouble', this, 'double', this.__typeAdapter);
    }
    asStringDouble() {
        return new SqlOperation0ValueSource('_asDouble', this, 'stringDouble', this.__typeAdapter);
    }
    asInt() {
        if (this.__valueType === 'double') {
            // Unsafe cast, it happens when TypeSafe is not in use, we round the value
            return new SqlOperation0ValueSource('_round', this, 'int', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            // Unsafe cast, it happens when TypeSafe is not in use, we round the value
            return new SqlOperation0ValueSource('_round', this, 'int', this.__typeAdapter);
        }
        return new NoopValueSource(this, 'int', this.__typeAdapter);
    }
    asStringInt() {
        if (this.__valueType === 'double') {
            // Unsafe cast, it happens when TypeSafe is not in use, we round the value
            return new SqlOperation0ValueSource('_round', this, 'stringInt', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            // Unsafe cast, it happens when TypeSafe is not in use, we round the value
            return new SqlOperation0ValueSource('_round', this, 'stringInt', this.__typeAdapter);
        }
        return new NoopValueSource(this, 'stringInt', this.__typeAdapter);
    }
    asBigint() {
        if (this.__valueType === 'double') {
            // Unsafe cast, it happens when TypeSafe is not in use, we round the value
            return new SqlOperation0ValueSource('_round', this, 'bigint', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            // Unsafe cast, it happens when TypeSafe is not in use, we round the value
            return new SqlOperation0ValueSource('_round', this, 'bigint', this.__typeAdapter);
        }
        return new NoopValueSource(this, 'bigint', this.__typeAdapter);
    }
    abs() {
        return new SqlOperation0ValueSource('_abs', this, this.__valueType, this.__typeAdapter);
    }
    ceil() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_ceil', this, 'stringInt', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_ceil', this, 'stringInt', this.__typeAdapter);
        }
        else if (this.__valueType === 'bigint') {
            return new SqlOperation0ValueSource('_ceil', this, 'bigint', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_ceil', this, 'int', this.__typeAdapter);
        }
    }
    floor() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_floor', this, 'stringInt', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_floor', this, 'stringInt', this.__typeAdapter);
        }
        else if (this.__valueType === 'bigint') {
            return new SqlOperation0ValueSource('_floor', this, 'bigint', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_floor', this, 'int', this.__typeAdapter);
        }
    }
    round() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_round', this, 'stringInt', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_round', this, 'stringInt', this.__typeAdapter);
        }
        else if (this.__valueType === 'bigint') {
            return new SqlOperation0ValueSource('_round', this, 'bigint', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_round', this, 'int', this.__typeAdapter);
        }
    }
    exp() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_exp', this, 'stringDouble', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_exp', this, 'stringDouble', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_exp', this, 'double', this.__typeAdapter);
        }
    }
    ln() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_ln', this, 'stringDouble', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_ln', this, 'stringDouble', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_ln', this, 'double', this.__typeAdapter);
        }
    }
    log10() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_log10', this, 'stringDouble', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_log10', this, 'stringDouble', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_log10', this, 'double', this.__typeAdapter);
        }
    }
    sqrt() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_sqrt', this, 'stringDouble', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_sqrt', this, 'stringDouble', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_sqrt', this, 'double', this.__typeAdapter);
        }
    }
    cbrt() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_cbrt', this, 'stringDouble', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_cbrt', this, 'stringDouble', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_cbrt', this, 'double', this.__typeAdapter);
        }
    }
    sign() {
        return new SqlOperation0ValueSource('_sign', this, 'int', this.__typeAdapter);
    }
    // Trigonometric Functions
    acos() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_acos', this, 'stringDouble', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_acos', this, 'stringDouble', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_acos', this, 'double', this.__typeAdapter);
        }
    }
    asin() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_asin', this, 'stringDouble', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_asin', this, 'stringDouble', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_asin', this, 'double', this.__typeAdapter);
        }
    }
    atan() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_atan', this, 'stringDouble', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_atan', this, 'stringDouble', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_atan', this, 'double', this.__typeAdapter);
        }
    }
    cos() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_cos', this, 'stringDouble', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_cos', this, 'stringDouble', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_cos', this, 'double', this.__typeAdapter);
        }
    }
    cot() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_cot', this, 'stringDouble', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_cot', this, 'stringDouble', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_cot', this, 'double', this.__typeAdapter);
        }
    }
    sin() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_sin', this, 'stringDouble', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_sin', this, 'stringDouble', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_sin', this, 'double', this.__typeAdapter);
        }
    }
    tan() {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation0ValueSource('_tan', this, 'stringDouble', this.__typeAdapter);
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation0ValueSource('_tan', this, 'stringDouble', this.__typeAdapter);
        }
        else {
            return new SqlOperation0ValueSource('_tan', this, 'double', this.__typeAdapter);
        }
    }
    // Date & Time Functions
    getDate() {
        return new SqlOperation0ValueSource('_getDate', this, 'int', this.__typeAdapter);
    }
    getTime() {
        return new SqlOperation0ValueSource('_getTime', this, 'int', this.__typeAdapter);
    }
    getFullYear() {
        return new SqlOperation0ValueSource('_getFullYear', this, 'int', this.__typeAdapter);
    }
    getMonth() {
        return new SqlOperation0ValueSource('_getMonth', this, 'int', this.__typeAdapter);
    }
    getDay() {
        return new SqlOperation0ValueSource('_getDay', this, 'int', this.__typeAdapter);
    }
    getHours() {
        return new SqlOperation0ValueSource('_getHours', this, 'int', this.__typeAdapter);
    }
    getMinutes() {
        return new SqlOperation0ValueSource('_getMinutes', this, 'int', this.__typeAdapter);
    }
    getSeconds() {
        return new SqlOperation0ValueSource('_getSeconds', this, 'int', this.__typeAdapter);
    }
    getMilliseconds() {
        return new SqlOperation0ValueSource('_getMilliseconds', this, 'int', this.__typeAdapter);
    }
    // SqlFunction1
    valueWhenNull(value) {
        return new SqlOperationValueWhenNullValueSource(this, value, this.__valueType, getTypeAdapter2(this, value));
    }
    and(value) {
        return condition(new SqlOperation1ValueSource('_and', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    or(value) {
        return condition(new SqlOperation1ValueSource('_or', this, value, 'boolean', getTypeAdapter2(this, value)));
    }
    // Trigonometric Functions
    atan2(value) {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation1ValueSource('_atan2', this, value, 'stringDouble', getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation1ValueSource('_atan2', this, value, 'stringDouble', getTypeAdapter2(this, value));
        }
        else {
            return new SqlOperation1ValueSource('_atan2', this, value, 'double', getTypeAdapter2(this, value));
        }
    }
    // String Functions
    concat(value) {
        return new SqlOperation1ValueSource('_concat', this, value, this.__valueType, getTypeAdapter2(this, value));
    }
    concatIfValue(value) {
        return new SqlOperation1ValueSourceIfValueOrIgnore('_concat', this, value, this.__valueType, getTypeAdapter2(this, value));
    }
    substringToEnd(start) {
        return new SqlOperation1ValueSource('_substringToEnd', this, start, this.__valueType, getTypeAdapter2(this, start));
    }
    // Number
    power(value) {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation1ValueSource('_power', this, value, 'stringDouble', getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation1ValueSource('_power', this, value, 'stringDouble', getTypeAdapter2(this, value));
        }
        else {
            return new SqlOperation1ValueSource('_power', this, value, 'double', getTypeAdapter2(this, value));
        }
    }
    logn(value) {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation1ValueSource('_logn', this, value, 'stringDouble', getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation1ValueSource('_logn', this, value, 'stringDouble', getTypeAdapter2(this, value));
        }
        else {
            return new SqlOperation1ValueSource('_logn', this, value, 'double', getTypeAdapter2(this, value));
        }
    }
    roundn(value) {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation1ValueSource('_roundn', this, value, 'stringDouble', getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation1ValueSource('_roundn', this, value, 'stringDouble', getTypeAdapter2(this, value));
        }
        else {
            return new SqlOperation1ValueSource('_roundn', this, value, 'double', getTypeAdapter2(this, value));
        }
    }
    minValue(value) {
        return createSqlOperation1ofOverloadedNumber(this, value, '_minValue');
    }
    maxValue(value) {
        return createSqlOperation1ofOverloadedNumber(this, value, '_maxValue');
    }
    // Number operators
    add(value) {
        return createSqlOperation1ofOverloadedNumber(this, value, '_add');
    }
    substract(value) {
        return createSqlOperation1ofOverloadedNumber(this, value, '_substract');
    }
    multiply(value) {
        return createSqlOperation1ofOverloadedNumber(this, value, '_multiply');
    }
    divide(value) {
        if (this.__valueType === 'stringInt') {
            return new SqlOperation1ValueSource('_divide', this, value, 'stringDouble', getTypeAdapter2(this, value));
        }
        else if (this.__valueType === 'stringDouble') {
            return new SqlOperation1ValueSource('_divide', this, value, 'stringDouble', getTypeAdapter2(this, value));
        }
        else {
            return new SqlOperation1ValueSource('_divide', this, value, 'double', getTypeAdapter2(this, value));
        }
    }
    mod(value) {
        return createSqlOperation1ofOverloadedNumber(this, value, '_mod');
    }
    // SqlFunction2
    substring(start, end) {
        return new SqlOperation2ValueSource('_substring', this, start, end, this.__valueType, getTypeAdapter3(this, start, end));
    }
    replaceIfValue(findString, replaceWith) {
        return new SqlOperation2ValueSourceIfValueOrIgnore('_replace', this, findString, replaceWith, this.__valueType, getTypeAdapter3(this, findString, replaceWith));
    }
    replace(findString, replaceWith) {
        return new SqlOperation2ValueSource('_replace', this, findString, replaceWith, this.__valueType, getTypeAdapter3(this, findString, replaceWith));
    }
}
exports.ValueSourceImpl = ValueSourceImpl;
class SqlOperationStatic0ValueSource extends ValueSourceImpl {
    constructor(optional, operation, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__operation = operation;
        this.__isOptional = optional;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params);
    }
    __resultIsOptional(_rule) {
        return this.__isOptional;
    }
}
exports.SqlOperationStatic0ValueSource = SqlOperationStatic0ValueSource;
class SqlOperationStaticBooleanValueSource extends ValueSourceImpl {
    constructor(operation) {
        super('boolean', undefined);
        this.__operation = operation;
        this.__isOptional = false;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params);
    }
    __toSqlForCondition(sqlBuilder, params) {
        if (this.__operation === '_true') {
            return sqlBuilder._trueForCondition(params);
        }
        else {
            return sqlBuilder._falseForCondition(params);
        }
    }
    __resultIsOptional(_rule) {
        return this.__isOptional;
    }
}
exports.SqlOperationStaticBooleanValueSource = SqlOperationStaticBooleanValueSource;
class SqlOperationStatic1ValueSource extends ValueSourceImpl {
    constructor(optional, operation, value, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__operation = operation;
        this.__value = value;
        this.__isOptional = optional;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__value, this.__valueType, this.__typeAdapter);
    }
    __resultIsOptional(_rule) {
        return this.__isOptional;
    }
    __addWiths(withs) {
        ITableOrView_1.__addWiths(this.__value, withs);
    }
}
exports.SqlOperationStatic1ValueSource = SqlOperationStatic1ValueSource;
class SqlOperationConstValueSource extends ValueSourceImpl {
    constructor(optional, value, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__operation = '_const';
        this.__value = value;
        this.__isOptional = optional;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder._const(params, this.__value, this.__valueType, this.__typeAdapter);
    }
    __toSqlForCondition(sqlBuilder, params) {
        return sqlBuilder._constForCondition(params, this.__value, this.__valueType, this.__typeAdapter);
    }
    __resultIsOptional(_rule) {
        return this.__isOptional;
    }
    isConstValue() {
        return true;
    }
    getConstValue() {
        return this.__value;
    }
    __addWiths(withs) {
        ITableOrView_1.__addWiths(this.__value, withs);
    }
}
exports.SqlOperationConstValueSource = SqlOperationConstValueSource;
class SqlOperationAsOptionalValueSource extends ValueSourceImpl {
    constructor(valueSource) {
        super(valueSource.__valueType, valueSource.__typeAdapter);
        this.__valueSource = valueSource;
    }
    __toSql(sqlBuilder, params) {
        return this.__valueSource.__toSql(sqlBuilder, params);
    }
    __resultIsOptional(_rule) {
        return true;
    }
    __addWiths(withs) {
        this.__valueSource.__addWiths(withs);
    }
}
exports.SqlOperationAsOptionalValueSource = SqlOperationAsOptionalValueSource;
class SqlOperation0ValueSource extends ValueSourceImpl {
    constructor(operation, valueSource, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__valueSource);
    }
    __resultIsOptional(rule) {
        return this.__valueSource.__resultIsOptional(rule);
    }
    __addWiths(withs) {
        this.__valueSource.__addWiths(withs);
    }
}
exports.SqlOperation0ValueSource = SqlOperation0ValueSource;
class SqlOperationIsNullValueSource extends ValueSourceImpl {
    constructor(operation, valueSource, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__valueSource);
    }
    __resultIsOptional(_rule) {
        return false;
    }
    __addWiths(withs) {
        this.__valueSource.__addWiths(withs);
    }
}
exports.SqlOperationIsNullValueSource = SqlOperationIsNullValueSource;
class SqlOperation1ValueSource extends ValueSourceImpl {
    constructor(operation, valueSource, value, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__valueSource.__valueType, this.__valueSource.__typeAdapter);
    }
    __resultIsOptional(rule) {
        return this.__valueSource.__resultIsOptional(rule) || isOptional(this.__value, rule);
    }
    __addWiths(withs) {
        this.__valueSource.__addWiths(withs);
        ITableOrView_1.__addWiths(this.__value, withs);
    }
}
exports.SqlOperation1ValueSource = SqlOperation1ValueSource;
class SqlOperationValueWhenNullValueSource extends ValueSourceImpl {
    constructor(valueSource, value, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = '_valueWhenNull';
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__valueSource.__valueType, this.__valueSource.__typeAdapter);
    }
    __resultIsOptional(rule) {
        return isOptional(this.__value, rule);
    }
    __addWiths(withs) {
        this.__valueSource.__addWiths(withs);
        ITableOrView_1.__addWiths(this.__value, withs);
    }
}
exports.SqlOperationValueWhenNullValueSource = SqlOperationValueWhenNullValueSource;
class SqlOperation1NotOptionalValueSource extends ValueSourceImpl {
    constructor(operation, valueSource, value, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__valueSource.__valueType, this.__valueSource.__typeAdapter);
    }
    __resultIsOptional(_rule) {
        return false;
    }
    __addWiths(withs) {
        this.__valueSource.__addWiths(withs);
        ITableOrView_1.__addWiths(this.__value, withs);
    }
}
exports.SqlOperation1NotOptionalValueSource = SqlOperation1NotOptionalValueSource;
class SqlOperation1ValueSourceIfValueOrNoop extends ValueSourceImpl {
    constructor(operation, valueSource, value, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        if (!sqlBuilder._isValue(this.__value)) {
            return '';
        }
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__valueSource.__valueType, this.__valueSource.__typeAdapter);
    }
    __resultIsOptional(rule) {
        return this.__valueSource.__resultIsOptional(rule);
    }
    __addWiths(withs) {
        this.__valueSource.__addWiths(withs);
        ITableOrView_1.__addWiths(this.__value, withs);
    }
}
exports.SqlOperation1ValueSourceIfValueOrNoop = SqlOperation1ValueSourceIfValueOrNoop;
class SqlOperationValueSourceIfValueAlwaysNoop extends ValueSourceImpl {
    constructor() {
        super('', undefined);
    }
    __toSql(_sqlBuilder, _params) {
        return '';
    }
    __resultIsOptional(_rule) {
        return false;
    }
}
exports.SqlOperationValueSourceIfValueAlwaysNoop = SqlOperationValueSourceIfValueAlwaysNoop;
class SqlOperation1ValueSourceIfValueOrIgnore extends ValueSourceImpl {
    constructor(operation, valueSource, value, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
        this.__value = value;
    }
    __toSql(sqlBuilder, params) {
        if (!sqlBuilder._isValue(this.__value)) {
            return this.__valueSource.__toSql(sqlBuilder, params);
        }
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__valueSource.__valueType, this.__valueSource.__typeAdapter);
    }
    __resultIsOptional(rule) {
        return this.__valueSource.__resultIsOptional(rule);
    }
    __addWiths(withs) {
        this.__valueSource.__addWiths(withs);
        ITableOrView_1.__addWiths(this.__value, withs);
    }
}
exports.SqlOperation1ValueSourceIfValueOrIgnore = SqlOperation1ValueSourceIfValueOrIgnore;
class SqlOperation2ValueSource extends ValueSourceImpl {
    constructor(operation, valueSource, value, value2, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
        this.__value = value;
        this.__value2 = value2;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__value2, this.__valueSource.__valueType, this.__valueSource.__typeAdapter);
    }
    __resultIsOptional(rule) {
        return this.__valueSource.__resultIsOptional(rule) || isOptional(this.__value, rule) || isOptional(this.__value2, rule);
    }
    __addWiths(withs) {
        this.__valueSource.__addWiths(withs);
        ITableOrView_1.__addWiths(this.__value, withs);
        ITableOrView_1.__addWiths(this.__value2, withs);
    }
}
exports.SqlOperation2ValueSource = SqlOperation2ValueSource;
class SqlOperation2ValueSourceIfValueOrIgnore extends ValueSourceImpl {
    constructor(operation, valueSource, value, value2, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__valueSource = valueSource;
        this.__operation = operation;
        this.__value = value;
        this.__value2 = value2;
    }
    __toSql(sqlBuilder, params) {
        if (!sqlBuilder._isValue(this.__value)) {
            return this.__valueSource.__toSql(sqlBuilder, params);
        }
        if (!sqlBuilder._isValue(this.__value2)) {
            return this.__valueSource.__toSql(sqlBuilder, params);
        }
        return sqlBuilder[this.__operation](params, this.__valueSource, this.__value, this.__value2, this.__valueSource.__valueType, this.__valueSource.__typeAdapter);
    }
    __resultIsOptional(rule) {
        return this.__valueSource.__resultIsOptional(rule);
    }
    __addWiths(withs) {
        this.__valueSource.__addWiths(withs);
        ITableOrView_1.__addWiths(this.__value, withs);
        ITableOrView_1.__addWiths(this.__value2, withs);
    }
}
exports.SqlOperation2ValueSourceIfValueOrIgnore = SqlOperation2ValueSourceIfValueOrIgnore;
class NoopValueSource extends ValueSourceImpl {
    constructor(valueSource, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__valueSource = valueSource;
    }
    __toSql(sqlBuilder, params) {
        return this.__valueSource.__toSql(sqlBuilder, params);
    }
    __resultIsOptional(rule) {
        return this.__valueSource.__resultIsOptional(rule);
    }
    __addWiths(withs) {
        this.__valueSource.__addWiths(withs);
    }
}
exports.NoopValueSource = NoopValueSource;
class SequenceValueSource extends ValueSourceImpl {
    constructor(operation, sequenceName, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__operation = operation;
        this.__sequenceName = sequenceName;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__sequenceName);
    }
    __resultIsOptional(_rule) {
        return false;
    }
}
exports.SequenceValueSource = SequenceValueSource;
class FragmentValueSource extends ValueSourceImpl {
    constructor(optional, sql, sqlParams, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__operation = '_fragment'; // Needed to detect if parenthesis is required
        this.__sql = sql;
        this.__sqlParams = sqlParams;
        this.__isOptional = optional;
        if (valueType === 'boolean') {
            this.__isBooleanForCondition = true;
        }
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder._fragment(params, this.__sql, this.__sqlParams);
    }
    __resultIsOptional(_rule) {
        return this.__isOptional;
    }
    __addWiths(withs) {
        const sqlParams = this.__sqlParams;
        for (let i = 0, length = sqlParams.length; i < length; i++) {
            const value = values_1.__getValueSourcePrivate(sqlParams[i]);
            value.__addWiths(withs);
        }
    }
}
exports.FragmentValueSource = FragmentValueSource;
class AggregateFunctions0ValueSource extends ValueSourceImpl {
    constructor(operation, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__operation = operation;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params);
    }
    __resultIsOptional(_rule) {
        return false;
    }
}
exports.AggregateFunctions0ValueSource = AggregateFunctions0ValueSource;
class AggregateFunctions1ValueSource extends ValueSourceImpl {
    constructor(optional, operation, value, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__operation = operation;
        this.__value = value;
        this.__isOptional = optional;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__value);
    }
    __resultIsOptional(_rule) {
        return this.__isOptional;
    }
    __addWiths(withs) {
        ITableOrView_1.__addWiths(this.__value, withs);
    }
}
exports.AggregateFunctions1ValueSource = AggregateFunctions1ValueSource;
class AggregateFunctions1or2ValueSource extends ValueSourceImpl {
    constructor(optional, operation, separator, value, valueType, typeAdapter) {
        super(valueType, typeAdapter);
        this.__operation = operation;
        this.__separator = separator;
        this.__value = value;
        this.__isOptional = optional;
    }
    __toSql(sqlBuilder, params) {
        return sqlBuilder[this.__operation](params, this.__separator, this.__value);
    }
    __resultIsOptional(_rule) {
        return this.__isOptional;
    }
    __addWiths(withs) {
        ITableOrView_1.__addWiths(this.__value, withs);
    }
}
exports.AggregateFunctions1or2ValueSource = AggregateFunctions1or2ValueSource;
function getTypeAdapter2(a, b) {
    if (a.__typeAdapter) {
        return a.__typeAdapter;
    }
    if (b instanceof ValueSourceImpl) {
        return b.__typeAdapter;
    }
    return undefined;
}
function getTypeAdapter3(a, b, c) {
    if (a.__typeAdapter) {
        return a.__typeAdapter;
    }
    if (b instanceof ValueSourceImpl && b.__typeAdapter) {
        return b.__typeAdapter;
    }
    if (c instanceof ValueSourceImpl) {
        return c.__typeAdapter;
    }
    return undefined;
}
function createSqlOperation1ofOverloadedNumber(thiz, value, operation) {
    if (thiz.__valueType === 'double' || thiz.__valueType === 'stringDouble' || thiz.__valueType === 'bigint') {
        return new SqlOperation1ValueSource(operation, thiz, value, thiz.__valueType, getTypeAdapter2(thiz, value));
    }
    if (thiz.__valueType === 'stringInt') {
        if (value instanceof ValueSourceImpl) {
            if (value.__valueType === 'int' || value.__valueType === 'stringInt') {
                return new SqlOperation1ValueSource(operation, thiz, value, 'stringInt', thiz.__typeAdapter);
            }
            else {
                return new SqlOperation1ValueSource(operation, thiz, value, 'stringDouble', getTypeAdapter2(thiz, value));
            }
        }
        if (Number.isInteger(value)) {
            return new SqlOperation1ValueSource(operation, thiz, value, 'stringInt', thiz.__typeAdapter);
        }
        else {
            return new SqlOperation1ValueSource(operation, thiz, value, 'stringDouble', getTypeAdapter2(thiz, value));
        }
    }
    else {
        if (value instanceof ValueSourceImpl) {
            if (value.__valueType === 'int') {
                return new SqlOperation1ValueSource(operation, thiz, value, 'int', thiz.__typeAdapter);
            }
            else if (value.__valueType === 'stringInt') {
                return new SqlOperation1ValueSource(operation, thiz, value, 'stringInt', thiz.__typeAdapter);
            }
            else if (value.__valueType === 'stringDouble') {
                return new SqlOperation1ValueSource(operation, thiz, value, 'stringDouble', getTypeAdapter2(thiz, value));
            }
            else {
                return new SqlOperation1ValueSource(operation, thiz, value, 'double', getTypeAdapter2(thiz, value));
            }
        }
        if (Number.isInteger(value)) {
            return new SqlOperation1ValueSource(operation, thiz, value, 'int', thiz.__typeAdapter);
        }
        else {
            return new SqlOperation1ValueSource(operation, thiz, value, 'double', getTypeAdapter2(thiz, value));
        }
    }
}
function isOptional(value, rule) {
    if (value instanceof ValueSourceImpl) {
        return value.__resultIsOptional(rule);
    }
    return !rule._isValue(value);
}
function condition(valueSource) {
    valueSource.__isBooleanForCondition = true;
    return valueSource;
}
//# sourceMappingURL=ValueSourceImpl.js.map