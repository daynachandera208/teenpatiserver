import type { SqlBuilder, SqlOperationStatic0, SqlOperationStatic1, SqlOperation1, SqlOperation2, ToSql, HasOperation, SqlSequenceOperation, SqlFragmentOperation, AggregateFunctions0, AggregateFunctions1, AggregateFunctions1or2, SqlFunction0, SqlComparator0 } from "../sqlBuilders/SqlBuilder";
import type { BooleanValueSource, IntValueSource, DoubleValueSource, NumberValueSource, StringValueSource, TypeSafeStringValueSource, ValueSource, NullableValueSource, LocalDateValueSource, LocalTimeValueSource, LocalDateTimeValueSource, DateValueSource, TimeValueSource, DateTimeValueSource, StringIntValueSource, StringDoubleValueSource, StringNumberValueSource, __ValueSourcePrivate, __OptionalRule, IfValueSource, BigintValueSource, TypeSafeBigintValueSource } from "../expressions/values";
import type { TypeAdapter } from "../TypeAdapter";
import type { IWithView } from "../utils/ITableOrView";
import { database, tableOrView, valueSourceType, valueType as valueType_, booleanValueSourceType, comparableValueSourceType, dateTimeValueSourceType, dateValueSourceType, doubleValueSourceType, equalableValueSourceType, intValueSourceType, localDateTimeValueSourceType, localDateValueSourceType, localTimeValueSourceType, nullableValueSourceType, numberValueSourceType, stringDoubleValueSourceType, stringIntValueSourceType, stringNumberValueSourceType, stringValueSourceType, timeValueSourceType, typeSafeStringValueSourceType, ifValueSourceType, bigintValueSourceType, typeSafeBigintValueSourceType } from "../utils/symbols";
export declare abstract class ValueSourceImpl implements ValueSource<any, any>, NullableValueSource<any, any>, BooleanValueSource<any, any>, IntValueSource<any, any>, StringIntValueSource<any, any>, DoubleValueSource<any, any>, StringDoubleValueSource<any, any>, NumberValueSource<any, any>, StringNumberValueSource<any, any>, BigintValueSource<any, any>, TypeSafeBigintValueSource<any, any>, StringValueSource<any, any>, TypeSafeStringValueSource<any, any>, LocalDateValueSource<any, any>, LocalTimeValueSource<any, any>, LocalDateTimeValueSource<any, any>, DateValueSource<any, any>, TimeValueSource<any, any>, DateTimeValueSource<any, any>, IfValueSource<any, any>, ToSql, __ValueSourcePrivate {
    [valueSourceType]: 'ValueSource';
    [nullableValueSourceType]: 'NullableValueSource';
    [equalableValueSourceType]: 'EqualableValueSource';
    [comparableValueSourceType]: 'ComparableValueSource';
    [booleanValueSourceType]: 'BooleanValueSource';
    [ifValueSourceType]: 'IfValueSource';
    [numberValueSourceType]: 'NumberValueSource';
    [stringNumberValueSourceType]: 'StringNumberValueSource';
    [intValueSourceType]: 'IntValueSource';
    [doubleValueSourceType]: 'DoubleValueSource';
    [bigintValueSourceType]: 'BigintValueSource';
    [typeSafeBigintValueSourceType]: 'TypeSafeBigintValueSource';
    [stringIntValueSourceType]: 'StringIntValueSource';
    [stringDoubleValueSourceType]: 'StringDoubleValueSource';
    [stringValueSourceType]: 'StringValueSource';
    [typeSafeStringValueSourceType]: 'TypeSafeStringValueSource';
    [dateValueSourceType]: 'DateValueSource';
    [timeValueSourceType]: 'TimeValueSource';
    [dateTimeValueSourceType]: 'DateTimeValueSource';
    [localDateValueSourceType]: 'LocalDateValueSource';
    [localTimeValueSourceType]: 'LocalTimeValueSource';
    [localDateTimeValueSourceType]: 'LocalDateTimeValueSource';
    [database]: any;
    [tableOrView]: any;
    [valueType_]: any;
    __valueType: string;
    __typeAdapter?: TypeAdapter;
    __resultIsOptionalCache?: boolean;
    __isBooleanForCondition?: boolean;
    constructor(valueType: string, typeAdapter: TypeAdapter | undefined);
    abstract __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __toSqlForCondition(sqlBuilder: SqlBuilder, params: any[]): string;
    abstract __resultIsOptional(rule: __OptionalRule): boolean;
    __isResultOptional(rule: __OptionalRule): boolean;
    __addWiths(_withs: Array<IWithView<any>>): void;
    isConstValue(): boolean;
    getConstValue(): any;
    asOptional(): any;
    isNull(): any;
    isNotNull(): any;
    equalsIfValue(value: any): any;
    equals(value: any): any;
    notEqualsIfValue(value: any): any;
    notEquals(value: any): any;
    isIfValue(value: any): any;
    is(value: any): any;
    isNotIfValue(value: any): any;
    isNot(value: any): any;
    asString(): any;
    equalsInsensitiveIfValue(value: any): any;
    equalsInsensitive(value: any): any;
    notEqualsInsensitiveIfValue(value: any): any;
    notEqualsInsensitive(value: any): any;
    smallerIfValue(value: any): any;
    smaller(value: any): any;
    largerIfValue(value: any): any;
    larger(value: any): any;
    smallAsIfValue(value: any): any;
    smallAs(value: any): any;
    largeAsIfValue(value: any): any;
    largeAs(value: any): any;
    inIfValue(value: any): any;
    in(value: any): any;
    notInIfValue(value: any): any;
    notIn(value: any): any;
    inN(...value: any[]): any;
    notInN(...value: any[]): any;
    likeIfValue(value: any): any;
    like(value: any): any;
    notLikeIfValue(value: any): any;
    notLike(value: any): any;
    likeInsensitiveIfValue(value: any): any;
    likeInsensitive(value: any): any;
    notLikeInsensitiveIfValue(value: any): any;
    notLikeInsensitive(value: any): any;
    startWithIfValue(value: any): any;
    startWith(value: any): any;
    notStartWithIfValue(value: any): any;
    notStartWith(value: any): any;
    endWithIfValue(value: any): any;
    endWith(value: any): any;
    notEndWithIfValue(value: any): any;
    notEndWith(value: any): any;
    startWithInsensitiveIfValue(value: any): any;
    startWithInsensitive(value: any): any;
    notStartWithInsensitiveIfValue(value: any): any;
    notStartWithInsensitive(value: any): any;
    endWithInsensitiveIfValue(value: any): any;
    endWithInsensitive(value: any): any;
    notEndWithInsensitiveIfValue(value: any): any;
    notEndWithInsensitive(value: any): any;
    containsIfValue(value: any): any;
    contains(value: any): any;
    notContainsIfValue(value: any): any;
    notContains(value: any): any;
    containsInsensitiveIfValue(value: any): any;
    containsInsensitive(value: any): any;
    notContainsInsensitiveIfValue(value: any): any;
    notContainsInsensitive(value: any): any;
    between(value: any, value2: any): any;
    notBetween(value: any, value2: any): any;
    negate(): any;
    lower(): any;
    upper(): any;
    length(): any;
    trim(): any;
    ltrim(): any;
    rtrim(): any;
    reverse(): any;
    asDouble(): any;
    asStringDouble(): any;
    asInt(): any;
    asStringInt(): any;
    asBigint(): any;
    abs(): any;
    ceil(): any;
    floor(): any;
    round(): any;
    exp(): any;
    ln(): any;
    log10(): any;
    sqrt(): any;
    cbrt(): any;
    sign(): any;
    acos(): any;
    asin(): any;
    atan(): any;
    cos(): any;
    cot(): any;
    sin(): any;
    tan(): any;
    getDate(): any;
    getTime(): any;
    getFullYear(): any;
    getMonth(): any;
    getDay(): any;
    getHours(): any;
    getMinutes(): any;
    getSeconds(): any;
    getMilliseconds(): any;
    valueWhenNull(value: any): any;
    and(value: any): any;
    or(value: any): any;
    atan2(value: any): any;
    concat(value: any): any;
    concatIfValue(value: any): any;
    substringToEnd(start: any): any;
    power(value: any): any;
    logn(value: any): any;
    roundn(value: any): any;
    minValue(value: any): any;
    maxValue(value: any): any;
    add(value: any): any;
    substract(value: any): any;
    multiply(value: any): any;
    divide(value: any): any;
    mod(value: any): any;
    substring(start: any, end: any): any;
    replaceIfValue(findString: any, replaceWith: any): any;
    replace(findString: any, replaceWith: any): any;
}
export declare class SqlOperationStatic0ValueSource extends ValueSourceImpl implements HasOperation {
    __operation: keyof SqlOperationStatic0;
    __isOptional: boolean;
    constructor(optional: boolean, operation: keyof SqlOperationStatic0, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(_rule: __OptionalRule): boolean;
}
export declare class SqlOperationStaticBooleanValueSource extends ValueSourceImpl implements HasOperation {
    __operation: keyof SqlOperationStatic0;
    __isOptional: boolean;
    constructor(operation: '_true' | '_false');
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __toSqlForCondition(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(_rule: __OptionalRule): boolean;
}
export declare class SqlOperationStatic1ValueSource extends ValueSourceImpl implements HasOperation {
    __operation: keyof SqlOperationStatic1;
    __value: any;
    __isOptional: boolean;
    constructor(optional: boolean, operation: keyof SqlOperationStatic1, value: any, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(_rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class SqlOperationConstValueSource extends ValueSourceImpl implements HasOperation {
    __operation: keyof SqlOperationStatic1;
    __value: any;
    __isOptional: boolean;
    constructor(optional: boolean, value: any, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __toSqlForCondition(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(_rule: __OptionalRule): boolean;
    isConstValue(): boolean;
    getConstValue(): any;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class SqlOperationAsOptionalValueSource extends ValueSourceImpl {
    __valueSource: ValueSourceImpl;
    constructor(valueSource: ValueSourceImpl);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(_rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class SqlOperation0ValueSource extends ValueSourceImpl implements HasOperation {
    __valueSource: ValueSourceImpl;
    __operation: keyof SqlFunction0;
    constructor(operation: keyof SqlFunction0, valueSource: ValueSourceImpl, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class SqlOperationIsNullValueSource extends ValueSourceImpl implements HasOperation {
    __valueSource: ValueSourceImpl;
    __operation: keyof SqlComparator0;
    constructor(operation: keyof SqlComparator0, valueSource: ValueSourceImpl, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(_rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class SqlOperation1ValueSource extends ValueSourceImpl implements HasOperation {
    __valueSource: ValueSourceImpl;
    __operation: keyof SqlOperation1;
    __value: any;
    constructor(operation: keyof SqlOperation1, valueSource: ValueSourceImpl, value: any, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class SqlOperationValueWhenNullValueSource extends ValueSourceImpl implements HasOperation {
    __valueSource: ValueSourceImpl;
    __operation: keyof SqlOperation1;
    __value: any;
    constructor(valueSource: ValueSourceImpl, value: any, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class SqlOperation1NotOptionalValueSource extends ValueSourceImpl implements HasOperation {
    __valueSource: ValueSourceImpl;
    __operation: keyof SqlOperation1;
    __value: any;
    constructor(operation: keyof SqlOperation1, valueSource: ValueSourceImpl, value: any, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(_rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class SqlOperation1ValueSourceIfValueOrNoop extends ValueSourceImpl implements HasOperation {
    __valueSource: ValueSourceImpl;
    __operation: keyof SqlOperation1;
    __value: any;
    constructor(operation: keyof SqlOperation1, valueSource: ValueSourceImpl, value: any, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class SqlOperationValueSourceIfValueAlwaysNoop extends ValueSourceImpl {
    constructor();
    __toSql(_sqlBuilder: SqlBuilder, _params: any[]): string;
    __resultIsOptional(_rule: __OptionalRule): boolean;
}
export declare class SqlOperation1ValueSourceIfValueOrIgnore extends ValueSourceImpl implements HasOperation {
    __valueSource: ValueSourceImpl;
    __operation: keyof SqlOperation1;
    __value: any;
    constructor(operation: keyof SqlOperation1, valueSource: ValueSourceImpl, value: any, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class SqlOperation2ValueSource extends ValueSourceImpl implements HasOperation {
    __valueSource: ValueSourceImpl;
    __operation: keyof SqlOperation2;
    __value: any;
    __value2: any;
    constructor(operation: keyof SqlOperation2, valueSource: ValueSourceImpl, value: any, value2: any, valueType: string, typeAdapter?: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class SqlOperation2ValueSourceIfValueOrIgnore extends ValueSourceImpl implements HasOperation {
    __valueSource: ValueSourceImpl;
    __operation: keyof SqlOperation2;
    __value: any;
    __value2: any;
    constructor(operation: keyof SqlOperation2, valueSource: ValueSourceImpl, value: any, value2: any, valueType: string, typeAdapter?: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class NoopValueSource extends ValueSourceImpl {
    __valueSource: ValueSourceImpl;
    constructor(valueSource: ValueSourceImpl, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class SequenceValueSource extends ValueSourceImpl {
    __operation: keyof SqlSequenceOperation;
    __sequenceName: string;
    constructor(operation: keyof SqlSequenceOperation, sequenceName: string, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(_rule: __OptionalRule): boolean;
}
export declare class FragmentValueSource extends ValueSourceImpl {
    __operation: keyof SqlFragmentOperation;
    __sql: TemplateStringsArray;
    __sqlParams: ValueSource<any, any>[];
    __isOptional: boolean;
    constructor(optional: boolean, sql: TemplateStringsArray, sqlParams: ValueSource<any, any>[], valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(_rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class AggregateFunctions0ValueSource extends ValueSourceImpl implements HasOperation {
    __operation: keyof AggregateFunctions0;
    constructor(operation: keyof AggregateFunctions0, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(_rule: __OptionalRule): boolean;
}
export declare class AggregateFunctions1ValueSource extends ValueSourceImpl implements HasOperation {
    __operation: keyof AggregateFunctions1;
    __value: any;
    __isOptional: boolean;
    constructor(optional: boolean, operation: keyof AggregateFunctions1, value: any, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(_rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class AggregateFunctions1or2ValueSource extends ValueSourceImpl implements HasOperation {
    __operation: keyof AggregateFunctions1or2;
    __value: any;
    __separator: string | undefined;
    __isOptional: boolean;
    constructor(optional: boolean, operation: keyof AggregateFunctions1or2, separator: string | undefined, value: any, valueType: string, typeAdapter: TypeAdapter | undefined);
    __toSql(sqlBuilder: SqlBuilder, params: any[]): string;
    __resultIsOptional(_rule: __OptionalRule): boolean;
    __addWiths(withs: Array<IWithView<any>>): void;
}
