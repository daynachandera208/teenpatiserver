import type { IWithView } from "../utils/ITableOrView";
import type { AliasedTableOrView, OuterJoinSourceOf, WITH_VIEW } from "../utils/tableOrViewUtils";
import type { AnyDB } from "../databases";
import type { SelectData, WithData } from "../sqlBuilders/SqlBuilder";
import { database, tableOrViewRef, type } from "../utils/symbols";
import { DefaultTypeAdapter, TypeAdapter } from "../TypeAdapter";
import { __OptionalRule } from "../expressions/values";
export declare class WithViewImpl<NAME extends string, REF extends WITH_VIEW<AnyDB, NAME>> implements IWithView<REF>, WithData {
    [database]: REF[typeof database];
    [type]: 'with';
    [tableOrViewRef]: REF;
    __name: string;
    __as?: string;
    __type: 'with';
    __selectData: SelectData;
    __optionalRule: __OptionalRule;
    __originalWith?: WithViewImpl<any, any>;
    constructor(name: string, selectData: SelectData, optionalRule: __OptionalRule);
    as<ALIAS extends string>(as: ALIAS): AliasedTableOrView<this, ALIAS>;
    forUseInLeftJoin(): OuterJoinSourceOf<this, ''>;
    forUseInLeftJoinAs<ALIAS extends string>(as: ALIAS): OuterJoinSourceOf<this, ALIAS>;
    __addWiths(withs: Array<IWithView<any>>): void;
}
export declare class ProxyTypeAdapter implements TypeAdapter {
    typeAdapter: TypeAdapter;
    constructor(typeAdapter: TypeAdapter);
    transformValueFromDB(value: unknown, type: string, next: DefaultTypeAdapter): unknown;
    transformValueToDB(value: unknown, type: string, next: DefaultTypeAdapter): unknown;
}
