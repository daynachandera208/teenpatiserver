import type { ToSql, SqlBuilder, DeleteData, InsertData, UpdateData, SelectData, SqlOperation, WithQueryData } from "./SqlBuilder";
import type { ITableOrView } from "../utils/ITableOrView";
import { BooleanValueSource, IfValueSource, ValueSource } from "../expressions/values";
import { Column } from "../utils/Column";
import { DefaultTypeAdapter, TypeAdapter } from "../TypeAdapter";
import type { ConnectionConfiguration } from "../utils/ConnectionConfiguration";
import { QueryRunner } from "../queryRunners/QueryRunner";
export declare class AbstractSqlBuilder implements SqlBuilder {
    _defaultTypeAdapter: DefaultTypeAdapter;
    _queryRunner: QueryRunner;
    _connectionConfiguration: ConnectionConfiguration;
    _operationsThatNeedParenthesis: {
        [operation in keyof SqlOperation]?: boolean;
    };
    constructor();
    _getSafeTableOrView(params: any[]): ITableOrView<any> | undefined;
    _setSafeTableOrView(params: any[], tableOrView: ITableOrView<any> | undefined): void;
    _isWithGenerated(params: any[]): boolean;
    _setWithGenerated(params: any[], value: boolean): void;
    _isWithGeneratedFinished(params: any[]): boolean;
    _setWithGeneratedFinished(params: any[], value: boolean): void;
    _isValue(value: any): boolean;
    _isReservedKeyword(_word: string): boolean;
    _forceAsIdentifier(identifier: string): string;
    _escape(identifier: string): string;
    _needParenthesis(value: any): boolean;
    _needParenthesisExcluding(value: any, excluding: keyof SqlOperation): boolean;
    _appendColumnName(column: Column, params: any[]): string;
    _appendColumnNameForCondition(column: Column, params: any[]): string;
    _appendRawColumnName(column: Column, params: any[]): string;
    _appendLiteralValue(value: number | string, _params: any[]): string;
    _getTableOrViewNameInSql(table: ITableOrView<any>): string;
    _appendCondition(condition: BooleanValueSource<any, any> | IfValueSource<any, any>, params: any[]): string;
    _appendConditionParenthesis(condition: BooleanValueSource<any, any> | IfValueSource<any, any>, params: any[]): string;
    _appendConditionParenthesisExcuding(condition: BooleanValueSource<any, any> | IfValueSource<any, any>, params: any[], excluding: keyof SqlOperation): string;
    _appendSql(value: ToSql | ValueSource<any, any> | Column, params: any[]): string;
    _appendSqlParenthesis(value: ToSql | ValueSource<any, any> | Column, params: any[]): string;
    _appendSqlParenthesisExcluding(value: ToSql | ValueSource<any, any> | Column, params: any[], excluding: keyof SqlOperation): string;
    _appendValue(value: any, params: any[], columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _appendValueParenthesis(value: any, params: any[], columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _appendValueParenthesisExcluding(value: any, params: any[], columnType: string, typeAdapter: TypeAdapter | undefined, excluding: keyof SqlOperation): string;
    _appendConditionSql(value: ToSql | ValueSource<any, any> | Column, params: any[]): string;
    _appendConditionSqlParenthesis(value: ToSql | ValueSource<any, any> | Column, params: any[]): string;
    _appendConditionSqlParenthesisExcluding(value: ToSql | ValueSource<any, any> | Column, params: any[], excluding: keyof SqlOperation): string;
    _appendConditionValue(value: any, params: any[], columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _appendConditionValueParenthesis(value: any, params: any[], columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _appendConditionValueParenthesisExcluding(value: any, params: any[], columnType: string, typeAdapter: TypeAdapter | undefined, excluding: keyof SqlOperation): string;
    _transformParamToDB(value: any, columnType: string, typeAdapter: TypeAdapter | undefined): any;
    _appendParam(value: any, params: any[], _columnType: string): string;
    _appendConditionParam(value: any, params: any[], columnType: string): string;
    _appendColumnAlias(name: string, _params: any[]): string;
    _buildWith(withData: WithQueryData, params: any[]): string;
    _buildSelect(query: SelectData, params: any[]): string;
    _buildSelectWithColumnsInfo(query: SelectData, params: any[], columnsForInsert: {
        [name: string]: Column | undefined;
    }): string;
    _appendSelectColumn(value: ValueSource<any, any>, params: any[], columnForInsert: Column | undefined): string;
    _fromNoTable(): string;
    _buildSelectOrderBy(query: SelectData, params: any[]): string;
    _buildSelectLimitOffset(query: SelectData, params: any[]): string;
    _buildInsertMultiple(query: InsertData, params: any[]): string;
    _appendCustomBooleanRemapForColumnIfRequired(column: Column, value: any, params: any[]): string | null;
    _appendValueForColumn(column: Column, value: any, params: any[]): string;
    _buildInsertDefaultValues(query: InsertData, params: any[]): string;
    _buildInsert(query: InsertData, params: any[]): string;
    _buildInsertFromSelect(query: InsertData, params: any[]): string;
    _buildInsertOutput(_query: InsertData, _params: any[]): string;
    _buildInsertReturning(query: InsertData, params: any[]): string;
    _nextSequenceValue(_params: any[], sequenceName: string): string;
    _currentSequenceValue(_params: any[], sequenceName: string): string;
    _buildUpdate(query: UpdateData, params: any[]): string;
    _buildDelete(query: DeleteData, params: any[]): string;
    _isNull(params: any[], valueSource: ToSql): string;
    _isNotNull(params: any[], valueSource: ToSql): string;
    _hasSameBooleanTypeAdapter(valueSource: Column, value: Column): valueSource is Column;
    _equals(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notEquals(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _is(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _isNot(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _equalsInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notEqualsInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _smaller(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _larger(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _smallAs(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _largeAs(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _in(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notIn(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _like(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notLike(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _likeInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notLikeInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _startWith(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notStartWith(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _endWith(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notEndWith(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _startWithInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notStartWithInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _endWithInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notEndWithInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _contains(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notContains(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _containsInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notContainsInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _between(params: any[], valueSource: ToSql, value: any, value2: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notBetween(params: any[], valueSource: ToSql, value: any, value2: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _pi(_params: any): string;
    _random(_params: any): string;
    _currentDate(_params: any): string;
    _currentTime(_params: any): string;
    _currentTimestamp(_params: any): string;
    _default(_params: any): string;
    _trueValue: string;
    _true(_params: any): string;
    _trueValueForCondition: string;
    _trueForCondition(_params: any): string;
    _falseValue: string;
    _false(_params: any): string;
    _falseValueForCondition: string;
    _falseForCondition(_params: any): string;
    _const(params: any[], value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _constForCondition(params: any[], value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _exists(params: any[], value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notExists(params: any[], value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _escapeLikeWildcard(params: any[], value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _negate(params: any[], valueSource: ToSql): string;
    _lower(params: any[], valueSource: ToSql): string;
    _upper(params: any[], valueSource: ToSql): string;
    _length(params: any[], valueSource: ToSql): string;
    _trim(params: any[], valueSource: ToSql): string;
    _ltrim(params: any[], valueSource: ToSql): string;
    _rtrim(params: any[], valueSource: ToSql): string;
    _reverse(params: any[], valueSource: ToSql): string;
    _asDouble(params: any[], valueSource: ToSql): string;
    _abs(params: any[], valueSource: ToSql): string;
    _ceil(params: any[], valueSource: ToSql): string;
    _floor(params: any[], valueSource: ToSql): string;
    _round(params: any[], valueSource: ToSql): string;
    _exp(params: any[], valueSource: ToSql): string;
    _ln(params: any[], valueSource: ToSql): string;
    _log10(params: any[], valueSource: ToSql): string;
    _sqrt(params: any[], valueSource: ToSql): string;
    _cbrt(params: any[], valueSource: ToSql): string;
    _sign(params: any[], valueSource: ToSql): string;
    _acos(params: any[], valueSource: ToSql): string;
    _asin(params: any[], valueSource: ToSql): string;
    _atan(params: any[], valueSource: ToSql): string;
    _cos(params: any[], valueSource: ToSql): string;
    _cot(params: any[], valueSource: ToSql): string;
    _sin(params: any[], valueSource: ToSql): string;
    _tan(params: any[], valueSource: ToSql): string;
    _getDate(params: any[], valueSource: ToSql): string;
    _getTime(params: any[], valueSource: ToSql): string;
    _getFullYear(params: any[], valueSource: ToSql): string;
    _getMonth(params: any[], valueSource: ToSql): string;
    _getDay(params: any[], valueSource: ToSql): string;
    _getHours(params: any[], valueSource: ToSql): string;
    _getMinutes(params: any[], valueSource: ToSql): string;
    _getSeconds(params: any[], valueSource: ToSql): string;
    _getMilliseconds(params: any[], valueSource: ToSql): string;
    _valueWhenNull(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _and(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _or(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _concat(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _substringToEnd(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _power(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _logn(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _roundn(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _minValue(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _maxValue(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _add(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _substract(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _multiply(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _divide(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _mod(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _atan2(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _substring(params: any[], valueSource: ToSql, value: any, value2: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _replace(params: any[], valueSource: ToSql, value: any, value2: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _buildCallProcedure(params: any[], procedureName: string, procedureParams: ValueSource<any, any>[]): string;
    _buildCallFunction(params: any[], functionName: string, functionParams: ValueSource<any, any>[]): string;
    _fragment(params: any[], sql: TemplateStringsArray, sqlParams: ValueSource<any, any>[]): string;
    _countAll(_params: any[]): string;
    _count(params: any[], value: any): string;
    _countDistinct(params: any[], value: any): string;
    _max(params: any[], value: any): string;
    _min(params: any[], value: any): string;
    _sum(params: any[], value: any): string;
    _sumDistinct(params: any[], value: any): string;
    _average(params: any[], value: any): string;
    _averageDistinct(params: any[], value: any): string;
    _stringConcat(params: any[], separator: string | undefined, value: any): string;
    _stringConcatDistinct(params: any[], separator: string | undefined, value: any): string;
}
