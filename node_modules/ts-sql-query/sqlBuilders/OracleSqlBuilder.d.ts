import type { ToSql, InsertData } from "./SqlBuilder";
import { TypeAdapter } from "../TypeAdapter";
import { ValueSource } from "../expressions/values";
import { AbstractSqlBuilder } from "./AbstractSqlBuilder";
import { Column } from "../utils/Column";
export declare class OracleSqlBuilder extends AbstractSqlBuilder {
    oracle: true;
    constructor();
    _isReservedKeyword(word: string): boolean;
    _nextSequenceValue(_params: any[], sequenceName: string): string;
    _currentSequenceValue(_params: any[], sequenceName: string): string;
    _fromNoTable(): string;
    _trueValue: string;
    _falseValue: string;
    _trueValueForCondition: string;
    _falseValueForCondition: string;
    _nullValueForCondition: string;
    _appendSql(value: ToSql | ValueSource<any, any> | Column, params: any[]): string;
    _appendConditionParam(value: any, params: any[], columnType: string): string;
    _appendColumnName(column: Column, params: any[]): string;
    _appendColumnNameForCondition(column: Column, params: any[]): string;
    _appendSelectColumn(value: ValueSource<any, any>, params: any[], columnForInsert: Column | undefined): string;
    _appendColumnAlias(name: string, params: any[]): string;
    _buildInsertMultiple(query: InsertData, params: any[]): string;
    _buildInsertOutput(_query: InsertData, _params: any[]): string;
    _buildInsertReturning(query: InsertData, params: any[]): string;
    _isNull(params: any[], valueSource: ToSql): string;
    _isNotNull(params: any[], valueSource: ToSql): string;
    _is(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _isNot(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _random(_params: any): string;
    _currentDate(_params: any): string;
    _valueWhenNull(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _divide(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _asDouble(params: any[], valueSource: ToSql): string;
    _log10(params: any[], valueSource: ToSql): string;
    _cbrt(params: any[], valueSource: ToSql): string;
    _getDate(params: any[], valueSource: ToSql): string;
    _getTime(params: any[], valueSource: ToSql): string;
    _getFullYear(params: any[], valueSource: ToSql): string;
    _getMonth(params: any[], valueSource: ToSql): string;
    _getDay(params: any[], valueSource: ToSql): string;
    _getHours(params: any[], valueSource: ToSql): string;
    _getMinutes(params: any[], valueSource: ToSql): string;
    _getSeconds(params: any[], valueSource: ToSql): string;
    _getMilliseconds(params: any[], valueSource: ToSql): string;
    _buildCallProcedure(params: any[], procedureName: string, procedureParams: ValueSource<any, any>[]): string;
    _buildCallFunction(params: any[], functionName: string, functionParams: ValueSource<any, any>[]): string;
    _stringConcat(params: any[], separator: string | undefined, value: any): string;
    _stringConcatDistinct(params: any[], separator: string | undefined, value: any): string;
    _escapeLikeWildcard(params: any[], value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _like(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notLike(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _likeInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notLikeInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _startWith(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notStartWith(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _endWith(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notEndWith(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _startWithInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notStartWithInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _endWithInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notEndWithInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _contains(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notContains(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _containsInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notContainsInsensitive(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _in(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
    _notIn(params: any[], valueSource: ToSql, value: any, columnType: string, typeAdapter: TypeAdapter | undefined): string;
}
