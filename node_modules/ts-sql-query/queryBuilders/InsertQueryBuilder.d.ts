import type { SqlBuilder, InsertData, SelectData } from "../sqlBuilders/SqlBuilder";
import type { ITable, IWithView } from "../utils/ITableOrView";
import type { InsertExpression, ExecutableInsertExpression, ExecutableInsert, ExecutableInsertReturning, ExecutableMultipleInsert, ExecutableInsertFromSelect } from "../expressions/insert";
import type { Column } from "../utils/Column";
import { database, tableOrView } from "../utils/symbols";
import { IExecutableSelect } from "../expressions/values";
export declare class InsertQueryBuilder implements InsertExpression<any>, ExecutableInsertReturning<any, any>, ExecutableInsert<any>, ExecutableInsertExpression<any>, ExecutableMultipleInsert<any>, ExecutableInsertFromSelect<any>, /*MissingKeysInsertExpression<any, any>,*/ InsertData {
    [database]: any;
    [tableOrView]: any;
    __sqlBuilder: SqlBuilder;
    __table: ITable<any>;
    __sets: {
        [property: string]: any;
    };
    __multiple?: {
        [property: string]: any;
    }[];
    __isMultiple: boolean;
    __idColumn?: Column;
    __from?: SelectData;
    __withs: Array<IWithView<any>>;
    __query: string;
    __params: any[];
    constructor(sqlBuilder: SqlBuilder, table: ITable<any>);
    executeInsert(): Promise<any>;
    query(): string;
    params(): any[];
    dynamicSet(): any;
    set(columns: any): this;
    setIfValue(columns: any): this;
    setIfSet(columns: any): this;
    setIfSetIfValue(columns: any): this;
    setIfNotSet(columns: any): this;
    setIfNotSetIfValue(columns: any): this;
    ignoreIfSet(...columns: any[]): this;
    values(columns: any): this;
    from(select: IExecutableSelect<any, any, any>): this;
    defaultValues: never;
    returningLastInsertedId: never;
}
