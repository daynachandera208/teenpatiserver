import type { TypeAdapter } from "../TypeAdapter";
import type { ValueSource, Argument } from "../expressions/values";
import { SqlBuilder } from "../sqlBuilders/SqlBuilder";
export declare class FragmentQueryBuilder {
    __type: string;
    __adapter: TypeAdapter | undefined;
    __isOptional: boolean;
    constructor(type: string, optional: boolean, adapter: TypeAdapter | undefined);
    sql(sql: TemplateStringsArray, ...params: ValueSource<any, any>[]): ValueSource<any, any>;
}
export declare class FragmentFunctionBuilder {
    definitions: Argument<any, any, any, any>[];
    constructor(definitions: Argument<any, any, any, any>[]);
    as(impl: (...vs: ValueSource<any, any>[]) => ValueSource<any, any>): ((...args: any[]) => ValueSource<any, any>);
}
export interface SqlBuilderSource {
    __sqlBuilder: SqlBuilder;
}
export declare class FragmentFunctionBuilderIfValue {
    definitions: Argument<any, any, any, any>[];
    sqlBuilderSource: SqlBuilderSource;
    constructor(sqlBuilderSource: SqlBuilderSource, definitions: Argument<any, any, any, any>[]);
    as(impl: (...vs: ValueSource<any, any>[]) => ValueSource<any, any>): ((...args: any[]) => ValueSource<any, any>);
}
