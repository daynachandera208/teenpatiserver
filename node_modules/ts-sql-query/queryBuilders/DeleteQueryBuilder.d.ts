import type { SqlBuilder, DeleteData } from "../sqlBuilders/SqlBuilder";
import type { ITable, IWithView } from "../utils/ITableOrView";
import type { BooleanValueSource, IfValueSource, IBooleanValueSource, IIfValueSource } from "../expressions/values";
import type { DeleteExpression, ExecutableDelete, DynamicExecutableDeleteExpression, DeleteExpressionAllowingNoWhere } from "../expressions/delete";
import type { int } from "ts-extended-types";
import { database, tableOrView } from "../utils/symbols";
export declare class DeleteQueryBuilder implements DeleteExpression<any>, DeleteExpressionAllowingNoWhere<any>, ExecutableDelete<any>, DynamicExecutableDeleteExpression<any>, DeleteData {
    [database]: any;
    [tableOrView]: any;
    __sqlBuilder: SqlBuilder;
    __table: ITable<any>;
    __where?: BooleanValueSource<any, any> | IfValueSource<any, any>;
    __allowNoWhere: boolean;
    __withs: Array<IWithView<any>>;
    __query: string;
    __params: any[];
    constructor(sqlBuilder: SqlBuilder, table: ITable<any>, allowNoWhere: boolean);
    executeDelete(min?: number, max?: number): Promise<int> & Promise<number>;
    query(): string;
    params(): any[];
    dynamicWhere(): this;
    where(condition: IBooleanValueSource<any, any> | IIfValueSource<any, any>): this;
    and(condition: IBooleanValueSource<any, any> | IIfValueSource<any, any>): this;
    or(condition: IBooleanValueSource<any, any> | IIfValueSource<any, any>): this;
}
