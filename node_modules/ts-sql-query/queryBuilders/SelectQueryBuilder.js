"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectQueryBuilder = void 0;
const ITableOrView_1 = require("../utils/ITableOrView");
const values_1 = require("../expressions/values");
const chained_error_1 = require("chained-error");
const ValueSourceImpl_1 = require("../internal/ValueSourceImpl");
const attachSource_1 = require("../utils/attachSource");
const symbols_1 = require("../utils/symbols");
const values_2 = require("../expressions/values");
const WithViewImpl_1 = require("../internal/WithViewImpl");
class SelectQueryBuilder {
    constructor(sqlBuilder, tables, distinct) {
        this.__columns = {};
        this.__joins = [];
        this.__groupBy = [];
        this.__withs = [];
        this.__inHaving = false;
        this.__oneColumn = false;
        // cache
        this.__query = '';
        this.__params = [];
        this.__sqlBuilder = sqlBuilder;
        this.__tables_or_views = tables;
        this.__distinct = distinct;
        for (let i = 0, length = tables.length; i < length; i++) {
            const table = tables[i];
            ITableOrView_1.__getTableOrViewPrivate(table).__addWiths(this.__withs);
        }
    }
    __transformValueFromDB(valueSource, value, column, index, count) {
        const valueSourcePrivate = values_1.__getValueSourcePrivate(valueSource);
        const typeAdapter = valueSourcePrivate.__typeAdapter;
        let result;
        if (typeAdapter) {
            result = typeAdapter.transformValueFromDB(value, valueSourcePrivate.__valueType, this.__sqlBuilder._defaultTypeAdapter);
        }
        else {
            result = this.__sqlBuilder._defaultTypeAdapter.transformValueFromDB(value, valueSourcePrivate.__valueType);
        }
        if (result !== null && result !== undefined) {
            return result;
        }
        if (!valueSourcePrivate.__isResultOptional(this.__sqlBuilder)) {
            let errorMessage = 'Expected a value as result';
            if (column !== undefined) {
                errorMessage += ' of the column `' + column;
            }
            if (index !== undefined) {
                errorMessage += ' at index `' + index + '`';
            }
            if (count) {
                errorMessage += ' of the count number of rows query';
            }
            errorMessage += ', but null or undefined value was found';
            throw new Error(errorMessage);
        }
        return result;
    }
    __transformRow(row, index) {
        const columns = this.__columns;
        const result = {};
        for (let prop in columns) {
            const valueSource = columns[prop];
            let value = row[prop];
            const transformed = this.__transformValueFromDB(valueSource, value, prop, index);
            if (transformed !== undefined && transformed !== null) {
                result[prop] = transformed;
            }
        }
        return result;
    }
    executeSelectNoneOrOne() {
        this.query();
        const source = new Error('Query executed at');
        try {
            if (this.__oneColumn) {
                return this.__sqlBuilder._queryRunner.executeSelectOneColumnOneRow(this.__query, this.__params).then((value) => {
                    const valueSource = this.__columns['result'];
                    if (value === undefined) {
                        return null;
                    }
                    return this.__transformValueFromDB(valueSource, value);
                }).catch((e) => {
                    throw attachSource_1.attachSource(new chained_error_1.default(e), source);
                });
            }
            else {
                return this.__sqlBuilder._queryRunner.executeSelectOneRow(this.__query, this.__params).then((row) => {
                    if (row) {
                        return this.__transformRow(row);
                    }
                    else {
                        return null;
                    }
                }).catch((e) => {
                    throw attachSource_1.attachSource(new chained_error_1.default(e), source);
                });
            }
        }
        catch (e) {
            throw new chained_error_1.default(e);
        }
    }
    executeSelectOne() {
        this.query();
        const source = new Error('Query executed at');
        try {
            if (this.__oneColumn) {
                return this.__sqlBuilder._queryRunner.executeSelectOneColumnOneRow(this.__query, this.__params).then((value) => {
                    const valueSource = this.__columns['result'];
                    if (value === undefined) {
                        throw new Error('No result returned by the database');
                    }
                    return this.__transformValueFromDB(valueSource, value);
                }).catch((e) => {
                    throw attachSource_1.attachSource(new chained_error_1.default(e), source);
                });
            }
            else {
                return this.__sqlBuilder._queryRunner.executeSelectOneRow(this.__query, this.__params).then((row) => {
                    if (row) {
                        return this.__transformRow(row);
                    }
                    else {
                        throw new Error('No result returned by the database');
                    }
                }).catch((e) => {
                    throw attachSource_1.attachSource(new chained_error_1.default(e), source);
                });
            }
        }
        catch (e) {
            throw new chained_error_1.default(e);
        }
    }
    executeSelectMany() {
        this.query();
        const source = new Error('Query executed at');
        try {
            if (this.__oneColumn) {
                return this.__sqlBuilder._queryRunner.executeSelectOneColumnManyRows(this.__query, this.__params).then((values) => {
                    const valueSource = this.__columns['result'];
                    return values.map((value) => {
                        if (value === undefined) {
                            value = null;
                        }
                        return this.__transformValueFromDB(valueSource, value);
                    });
                }).catch((e) => {
                    throw attachSource_1.attachSource(new chained_error_1.default(e), source);
                });
            }
            else {
                return this.__sqlBuilder._queryRunner.executeSelectManyRows(this.__query, this.__params).then((rows) => {
                    return rows.map((row, index) => {
                        return this.__transformRow(row, index);
                    });
                }).catch((e) => {
                    throw attachSource_1.attachSource(new chained_error_1.default(e), source);
                });
            }
        }
        catch (e) {
            throw new chained_error_1.default(e);
        }
    }
    __executeSelectCount(source) {
        try {
            const countAll = new ValueSourceImpl_1.AggregateFunctions0ValueSource('_countAll', 'int', undefined);
            const selectCountData = {
                __distinct: false,
                __columns: { '': countAll },
                __tables_or_views: this.__tables_or_views,
                __joins: this.__joins,
                __where: this.__where,
                __groupBy: [],
                __withs: this.__withs
            };
            const params = [];
            const query = this.__sqlBuilder._buildSelect(selectCountData, params);
            return this.__sqlBuilder._queryRunner.executeSelectOneColumnOneRow(query, params).then((value) => {
                return this.__transformValueFromDB(countAll, value, undefined, undefined, true);
            }).catch((e) => {
                throw attachSource_1.attachSource(new chained_error_1.default(e), source);
            });
        }
        catch (e) {
            throw attachSource_1.attachSource(new chained_error_1.default(e), source);
        }
    }
    executeSelectPage(extras) {
        let dataPromise;
        if (extras && extras.data) {
            dataPromise = this.__sqlBuilder._queryRunner.createResolvedPromise(extras.data);
        }
        else {
            dataPromise = this.executeSelectMany();
        }
        const source = new Error('Query executed at');
        return dataPromise.then((data) => {
            if (extras && (extras.count !== undefined && extras.count !== null)) {
                return { ...extras, data, count: extras.count };
            }
            else {
                return this.__executeSelectCount(source).then((count) => {
                    return { ...extras, data, count };
                });
            }
        });
    }
    query() {
        this.__finishJoinHaving();
        if (this.__query) {
            return this.__query;
        }
        try {
            this.__query = this.__sqlBuilder._buildSelect(this, this.__params);
        }
        catch (e) {
            throw new chained_error_1.default(e);
        }
        return this.__query;
    }
    params() {
        this.__finishJoinHaving();
        if (!this.__query) {
            this.query();
        }
        return this.__params;
    }
    select(columns) {
        this.__finishJoinHaving();
        this.__query = '';
        this.__columns = columns;
        const withs = this.__withs;
        for (const property in columns) {
            const column = columns[property];
            values_1.__getValueSourcePrivate(column).__addWiths(withs);
        }
        return this;
    }
    selectOneColumn(column) {
        this.__finishJoinHaving();
        this.__query = '';
        this.__oneColumn = true;
        this.__columns = { 'result': column };
        values_1.__getValueSourcePrivate(column).__addWiths(this.__withs);
        return this;
    }
    from(table) {
        this.__finishJoinHaving();
        this.__query = '';
        this.__tables_or_views.push(table);
        ITableOrView_1.__getTableOrViewPrivate(table).__addWiths(this.__withs);
        return this;
    }
    join(table) {
        this.__finishJoinHaving();
        this.__query = '';
        if (this.__lastJoin) {
            throw new Error('Illegal state');
        }
        this.__lastJoin = {
            __joinType: 'join',
            __table_or_view: table
        };
        ITableOrView_1.__getTableOrViewPrivate(table).__addWiths(this.__withs);
        return this;
    }
    innerJoin(table) {
        this.__finishJoinHaving();
        this.__query = '';
        if (this.__lastJoin) {
            throw new Error('Illegal state');
        }
        this.__lastJoin = {
            __joinType: 'innerJoin',
            __table_or_view: table
        };
        ITableOrView_1.__getTableOrViewPrivate(table).__addWiths(this.__withs);
        return this;
    }
    leftJoin(source) {
        this.__finishJoinHaving();
        this.__query = '';
        if (this.__lastJoin) {
            throw new Error('Illegal state');
        }
        this.__lastJoin = {
            __joinType: 'leftJoin',
            __table_or_view: source
        };
        ITableOrView_1.__getTableOrViewPrivate(source).__addWiths(this.__withs);
        return this;
    }
    leftOuterJoin(source) {
        this.__finishJoinHaving();
        this.__query = '';
        if (this.__lastJoin) {
            throw new Error('Illegal state');
        }
        this.__lastJoin = {
            __joinType: 'leftOuterJoin',
            __table_or_view: source
        };
        ITableOrView_1.__getTableOrViewPrivate(source).__addWiths(this.__withs);
        return this;
    }
    dynamicOn() {
        this.__query = '';
        return this;
    }
    on(condition) {
        this.__query = '';
        if (!this.__lastJoin) {
            throw new Error('Illegal state');
        }
        this.__lastJoin.__on = values_2.asValueSource(condition);
        this.__joins.push(this.__lastJoin);
        this.__lastJoin = undefined;
        values_1.__getValueSourcePrivate(condition).__addWiths(this.__withs);
        return this;
    }
    __finishJoinHaving() {
        if (this.__lastJoin) {
            this.__joins.push(this.__lastJoin);
            this.__lastJoin = undefined;
        }
        this.__inHaving = false;
    }
    dynamicWhere() {
        this.__finishJoinHaving();
        this.__query = '';
        return this;
    }
    where(condition) {
        this.__finishJoinHaving();
        this.__query = '';
        if (this.__where) {
            throw new Error('Illegal state');
        }
        this.__where = values_2.asValueSource(condition);
        values_1.__getValueSourcePrivate(condition).__addWiths(this.__withs);
        return this;
    }
    and(condition) {
        this.__query = '';
        values_1.__getValueSourcePrivate(condition).__addWiths(this.__withs);
        if (this.__lastJoin) {
            if (this.__lastJoin.__on) {
                this.__lastJoin.__on = this.__lastJoin.__on.and(condition);
            }
            else {
                this.__lastJoin.__on = values_2.asValueSource(condition);
            }
            return this;
        }
        if (this.__inHaving) {
            if (this.__having) {
                this.__having = this.__having.and(condition);
            }
            else {
                this.__having = values_2.asValueSource(condition);
            }
            return this;
        }
        this.__finishJoinHaving();
        if (this.__where) {
            this.__where = this.__where.and(condition);
        }
        else {
            this.__where = values_2.asValueSource(condition);
        }
        return this;
    }
    or(condition) {
        this.__query = '';
        values_1.__getValueSourcePrivate(condition).__addWiths(this.__withs);
        if (this.__lastJoin) {
            if (this.__lastJoin.__on) {
                this.__lastJoin.__on = this.__lastJoin.__on.or(condition);
            }
            else {
                this.__lastJoin.__on = values_2.asValueSource(condition);
            }
            return this;
        }
        if (this.__inHaving) {
            if (this.__having) {
                this.__having = this.__having.or(condition);
            }
            else {
                this.__having = values_2.asValueSource(condition);
            }
            return this;
        }
        if (this.__where) {
            this.__where = this.__where.or(condition);
        }
        else {
            this.__where = values_2.asValueSource(condition);
        }
        return this;
    }
    dynamicHaving() {
        this.__finishJoinHaving();
        this.__query = '';
        this.__inHaving = true;
        return this;
    }
    having(condition) {
        this.__finishJoinHaving();
        this.__query = '';
        this.__inHaving = true;
        if (this.__having) {
            throw new Error('Illegal state');
        }
        this.__having = values_2.asValueSource(condition);
        values_1.__getValueSourcePrivate(condition).__addWiths(this.__withs);
        return this;
    }
    groupBy(...columns) {
        this.__finishJoinHaving();
        this.__query = '';
        for (let i = 0, length = columns.length; i < length; i++) {
            const column = columns[i];
            if (!column || typeof column !== 'object') {
                const valueSource = this.__columns[column];
                if (!valueSource) {
                    throw new Error('The column "' + column + '" is not part of the select clause');
                }
                this.__groupBy.push(valueSource);
            }
            else {
                this.__groupBy.push(column);
                ITableOrView_1.__addWiths(column, this.__withs);
            }
        }
        return this;
    }
    orderBy(column, mode) {
        this.__finishJoinHaving();
        this.__query = '';
        if (!this.__orderBy) {
            this.__orderBy = {};
        }
        if (column in this.__orderBy) {
            throw new Error('Column ' + column + ' already used in the order by clause');
        }
        this.__orderBy[column] = mode || null;
        return this;
    }
    orderByFromString(orderBy) {
        this.__finishJoinHaving();
        this.__query = '';
        const columnsInQuery = {};
        const columns = this.__columns;
        for (const property in columns) {
            columnsInQuery[property.toLowerCase()] = property;
        }
        const split = orderBy.trim().toLowerCase().replace(/\s+/g, ' ').split(/\s*,\s*/);
        for (let i = 0, length = split.length; i < length; i++) {
            const clause = split[i];
            const separatorIndex = clause.indexOf(' ');
            let column;
            let ordering;
            if (separatorIndex < 0) {
                column = clause;
                ordering = null;
            }
            else {
                column = clause.substring(0, separatorIndex);
                ordering = clause.substring(separatorIndex + 1);
            }
            const realColumnName = columnsInQuery[column];
            if (!realColumnName) {
                throw new Error('The column "' + column + '" is not part of the select clause');
            }
            if (ordering === 'asc') {
                this.orderBy(realColumnName, 'asc');
            }
            else if (ordering === 'desc') {
                this.orderBy(realColumnName, 'desc');
            }
            else if (ordering === 'asc nulls first') {
                this.orderBy(realColumnName, 'asc nulls first');
            }
            else if (ordering === 'desc nulls first') {
                this.orderBy(realColumnName, 'desc nulls first');
            }
            else if (ordering === 'asc nulls last') {
                this.orderBy(realColumnName, 'asc nulls last');
            }
            else if (ordering === 'desc nulls last') {
                this.orderBy(realColumnName, 'desc nulls last');
            }
            else if (ordering === 'insensitive') {
                this.orderBy(realColumnName, 'insensitive');
            }
            else if (ordering === 'asc insensitive') {
                this.orderBy(realColumnName, 'asc insensitive');
            }
            else if (ordering === 'desc insensitive') {
                this.orderBy(realColumnName, 'desc insensitive');
            }
            else if (ordering === 'asc nulls first insensitive') {
                this.orderBy(realColumnName, 'asc nulls first insensitive');
            }
            else if (ordering === 'desc nulls first insensitive') {
                this.orderBy(realColumnName, 'desc nulls first insensitive');
            }
            else if (ordering === 'asc nulls last insensitive') {
                this.orderBy(realColumnName, 'asc nulls last insensitive');
            }
            else if (ordering === 'desc nulls last insensitive') {
                this.orderBy(realColumnName, 'desc nulls last insensitive');
            }
            else if (!ordering) {
                this.orderBy(realColumnName);
            }
            else {
                throw new Error('Unknow ordering clause "' + ordering + '" in the order by related to the column "' + column + '"');
            }
        }
        return this;
    }
    limit(limit) {
        this.__finishJoinHaving();
        this.__query = '';
        this.__limit = values_2.asValueSource(limit);
        ITableOrView_1.__addWiths(limit, this.__withs);
        return this;
    }
    offset(offset) {
        this.__finishJoinHaving();
        this.__query = '';
        this.__offset = values_2.asValueSource(offset);
        ITableOrView_1.__addWiths(offset, this.__withs);
        return this;
    }
    __toSql(sqlBuilder, params) {
        this.__finishJoinHaving();
        return sqlBuilder._buildSelect(this, params);
    }
    __toSqlForCondition(sqlBuilder, params) {
        this.__finishJoinHaving();
        return sqlBuilder._buildSelect(this, params);
    }
    __addWiths(withs) {
        this.__finishJoinHaving();
        const withViews = this.__withs;
        for (let i = 0, length = withViews.length; i < length; i++) {
            const withView = withViews[i];
            ITableOrView_1.__getTableOrViewPrivate(withView).__addWiths(withs);
        }
    }
}
exports.SelectQueryBuilder = SelectQueryBuilder;
// Defined separated to don't have problems with the variable definition of this method
SelectQueryBuilder.prototype.forUseInQueryAs = function (as) {
    const thiz = this;
    return new WithViewImpl_1.WithViewImpl(as, thiz, thiz.__sqlBuilder);
};
//# sourceMappingURL=SelectQueryBuilder.js.map