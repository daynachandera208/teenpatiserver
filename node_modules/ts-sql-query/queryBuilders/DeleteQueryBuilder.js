"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteQueryBuilder = void 0;
const chained_error_1 = require("chained-error");
const attachSource_1 = require("../utils/attachSource");
const symbols_1 = require("../utils/symbols");
const values_1 = require("../expressions/values");
const values_2 = require("../expressions/values");
class DeleteQueryBuilder {
    constructor(sqlBuilder, table, allowNoWhere) {
        this.__withs = [];
        // cache
        this.__query = '';
        this.__params = [];
        this.__sqlBuilder = sqlBuilder;
        this.__table = table;
        this.__allowNoWhere = allowNoWhere;
    }
    executeDelete(min, max) {
        this.query();
        const source = new Error('Query executed at');
        try {
            let result = this.__sqlBuilder._queryRunner.executeDelete(this.__query, this.__params).catch((e) => {
                throw attachSource_1.attachSource(new chained_error_1.default(e), source);
            });
            if (min !== undefined) {
                result = result.then((count) => {
                    if (count < min) {
                        throw attachSource_1.attachSource(new Error("The delete operation didn't delete the minimum of " + min + " row(s)"), source);
                    }
                    if (max !== undefined && count > max) {
                        throw attachSource_1.attachSource(new Error("The delete operation deleted more that the maximum of " + max + " row(s)"), source);
                    }
                    return count;
                });
            }
            return result;
        }
        catch (e) {
            throw new chained_error_1.default(e);
        }
    }
    query() {
        if (this.__query) {
            return this.__query;
        }
        try {
            this.__query = this.__sqlBuilder._buildDelete(this, this.__params);
        }
        catch (e) {
            throw new chained_error_1.default(e);
        }
        return this.__query;
    }
    params() {
        if (!this.__query) {
            this.query();
        }
        return this.__params;
    }
    dynamicWhere() {
        this.__query = '';
        return this;
    }
    where(condition) {
        this.__query = '';
        if (this.__where) {
            throw new Error('Illegal state');
        }
        this.__where = values_1.asValueSource(condition);
        values_2.__getValueSourcePrivate(condition).__addWiths(this.__withs);
        return this;
    }
    and(condition) {
        this.__query = '';
        if (this.__where) {
            this.__where = this.__where.and(condition);
        }
        else {
            this.__where = values_1.asValueSource(condition);
        }
        values_2.__getValueSourcePrivate(condition).__addWiths(this.__withs);
        return this;
    }
    or(condition) {
        this.__query = '';
        if (this.__where) {
            this.__where = this.__where.or(condition);
        }
        else {
            this.__where = values_1.asValueSource(condition);
        }
        values_2.__getValueSourcePrivate(condition).__addWiths(this.__withs);
        return this;
    }
}
exports.DeleteQueryBuilder = DeleteQueryBuilder;
//# sourceMappingURL=DeleteQueryBuilder.js.map