"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateQueryBuilder = void 0;
const chained_error_1 = require("chained-error");
const attachSource_1 = require("../utils/attachSource");
const symbols_1 = require("../utils/symbols");
const values_1 = require("../expressions/values");
const ITableOrView_1 = require("../utils/ITableOrView");
const values_2 = require("../expressions/values");
class UpdateQueryBuilder {
    constructor(sqlBuilder, table, allowNoWhere) {
        this.__sets = {};
        this.__withs = [];
        // cache
        this.__params = [];
        this.__query = '';
        this.__sqlBuilder = sqlBuilder;
        this.__table = table;
        this.__allowNoWhere = allowNoWhere;
    }
    executeUpdate(min, max) {
        this.query();
        const source = new Error('Query executed at');
        try {
            if (Object.getOwnPropertyNames(this.__sets).length <= 0) {
                // Nothing to update, nothing to set
                return this.__sqlBuilder._queryRunner.createResolvedPromise(0);
            }
            let result = this.__sqlBuilder._queryRunner.executeUpdate(this.__query, this.__params).catch((e) => {
                throw attachSource_1.attachSource(new chained_error_1.default(e), source);
            });
            if (min !== undefined) {
                result = result.then((count) => {
                    if (count < min) {
                        throw attachSource_1.attachSource(new Error("The update operation didn't update the minimum of " + min + " row(s)"), source);
                    }
                    if (max !== undefined && count > max) {
                        throw attachSource_1.attachSource(new Error("The update operation updated more that the maximum of " + max + " row(s)"), source);
                    }
                    return count;
                });
            }
            return result;
        }
        catch (e) {
            throw new chained_error_1.default(e);
        }
    }
    query() {
        if (this.__query) {
            return this.__query;
        }
        try {
            this.__query = this.__sqlBuilder._buildUpdate(this, this.__params);
        }
        catch (e) {
            throw new chained_error_1.default(e);
        }
        return this.__query;
    }
    params() {
        if (!this.__query) {
            this.query();
        }
        return this.__params;
    }
    dynamicSet() {
        this.__query = '';
        return this;
    }
    set(columns) {
        this.__query = '';
        if (!columns) {
            return this;
        }
        let sets = this.__sets;
        const properties = Object.getOwnPropertyNames(columns);
        for (let i = 0, length = properties.length; i < length; i++) {
            const property = properties[i];
            const value = columns[property];
            sets[property] = value;
            ITableOrView_1.__addWiths(value, this.__withs);
        }
        return this;
    }
    setIfValue(columns) {
        this.__query = '';
        if (!columns) {
            return this;
        }
        let sets = this.__sets;
        const properties = Object.getOwnPropertyNames(columns);
        for (let i = 0, length = properties.length; i < length; i++) {
            const property = properties[i];
            const value = columns[property];
            if (!this.__sqlBuilder._isValue(value)) {
                continue;
            }
            sets[property] = value;
        }
        return this;
    }
    setIfSet(columns) {
        this.__query = '';
        if (!columns) {
            return this;
        }
        let sets = this.__sets;
        const properties = Object.getOwnPropertyNames(columns);
        for (let i = 0, length = properties.length; i < length; i++) {
            const property = properties[i];
            if (!(property in sets)) {
                continue;
            }
            const value = columns[property];
            sets[property] = value;
            ITableOrView_1.__addWiths(value, this.__withs);
        }
        return this;
    }
    setIfSetIfValue(columns) {
        this.__query = '';
        if (!columns) {
            return this;
        }
        let sets = this.__sets;
        const properties = Object.getOwnPropertyNames(columns);
        for (let i = 0, length = properties.length; i < length; i++) {
            const property = properties[i];
            if (!(property in sets)) {
                continue;
            }
            const value = columns[property];
            if (!this.__sqlBuilder._isValue(value)) {
                continue;
            }
            sets[property] = value;
        }
        return this;
    }
    setIfNotSet(columns) {
        this.__query = '';
        if (!columns) {
            return this;
        }
        let sets = this.__sets;
        const properties = Object.getOwnPropertyNames(columns);
        for (let i = 0, length = properties.length; i < length; i++) {
            const property = properties[i];
            if (property in sets) {
                continue;
            }
            const value = columns[property];
            sets[property] = value;
            ITableOrView_1.__addWiths(value, this.__withs);
        }
        return this;
    }
    setIfNotSetIfValue(columns) {
        this.__query = '';
        if (!columns) {
            return this;
        }
        let sets = this.__sets;
        const properties = Object.getOwnPropertyNames(columns);
        for (let i = 0, length = properties.length; i < length; i++) {
            const property = properties[i];
            if (property in sets) {
                continue;
            }
            const value = columns[property];
            if (!this.__sqlBuilder._isValue(value)) {
                continue;
            }
            sets[property] = value;
        }
        return this;
    }
    ignoreIfSet(...columns) {
        this.__query = '';
        let sets = this.__sets;
        for (let i = 0, length = columns.length; i < length; i++) {
            let column = columns[i];
            delete sets[column];
        }
        return this;
    }
    dynamicWhere() {
        this.__query = '';
        return this;
    }
    where(condition) {
        this.__query = '';
        if (this.__where) {
            throw new Error('Illegal state');
        }
        this.__where = values_1.asValueSource(condition);
        values_2.__getValueSourcePrivate(condition).__addWiths(this.__withs);
        return this;
    }
    and(condition) {
        this.__query = '';
        if (this.__where) {
            this.__where = this.__where.and(condition);
        }
        else {
            this.__where = values_1.asValueSource(condition);
        }
        values_2.__getValueSourcePrivate(condition).__addWiths(this.__withs);
        return this;
    }
    or(condition) {
        this.__query = '';
        if (this.__where) {
            this.__where = this.__where.or(condition);
        }
        else {
            this.__where = values_1.asValueSource(condition);
        }
        values_2.__getValueSourcePrivate(condition).__addWiths(this.__withs);
        return this;
    }
}
exports.UpdateQueryBuilder = UpdateQueryBuilder;
//# sourceMappingURL=UpdateQueryBuilder.js.map