import type { SqlBuilder, UpdateData } from "../sqlBuilders/SqlBuilder";
import type { ITable, IWithView } from "../utils/ITableOrView";
import type { BooleanValueSource, IBooleanValueSource, IfValueSource, IIfValueSource } from "../expressions/values";
import type { UpdateExpression, ExecutableUpdate, ExecutableUpdateExpression, DynamicExecutableUpdateExpression, UpdateExpressionAllowingNoWhere, NotExecutableUpdateExpression } from "../expressions/update";
import type { int } from "ts-extended-types";
import { database, tableOrView } from "../utils/symbols";
export declare class UpdateQueryBuilder implements UpdateExpression<any>, UpdateExpressionAllowingNoWhere<any>, ExecutableUpdate<any>, ExecutableUpdateExpression<any>, NotExecutableUpdateExpression<any>, DynamicExecutableUpdateExpression<any>, UpdateData {
    [database]: any;
    [tableOrView]: any;
    __sqlBuilder: SqlBuilder;
    __table: ITable<any>;
    __sets: {
        [property: string]: any;
    };
    __where?: BooleanValueSource<any, any> | IfValueSource<any, any>;
    __allowNoWhere: boolean;
    __withs: Array<IWithView<any>>;
    __params: any[];
    __query: string;
    constructor(sqlBuilder: SqlBuilder, table: ITable<any>, allowNoWhere: boolean);
    executeUpdate(min?: number, max?: number): Promise<int> & Promise<number>;
    query(): string;
    params(): any[];
    dynamicSet(): this;
    set(columns: any): this;
    setIfValue(columns: any): this;
    setIfSet(columns: any): this;
    setIfSetIfValue(columns: any): this;
    setIfNotSet(columns: any): this;
    setIfNotSetIfValue(columns: any): this;
    ignoreIfSet(...columns: any[]): this;
    dynamicWhere(): this;
    where(condition: IBooleanValueSource<any, any> | IIfValueSource<any, any>): this;
    and(condition: IBooleanValueSource<any, any> | IIfValueSource<any, any>): this;
    or(condition: IBooleanValueSource<any, any> | IIfValueSource<any, any>): this;
}
