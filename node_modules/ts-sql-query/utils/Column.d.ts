import type { ITableOrView, TableOrViewRef } from "./ITableOrView";
import type { ToSql } from "../sqlBuilders/SqlBuilder";
import type { ValueSource, __ValueSourcePrivate } from "../expressions/values";
import type { autogeneratedPrimaryKeyValue, computedValue, hasDefaultValue, optionalValue, primaryKeyValue, type } from "./symbols";
import type { AnyDB } from "../databases";
export interface Column {
    [type]: 'column';
}
export interface ColumnWithDefaultValue extends Column {
    [hasDefaultValue]: true;
}
export interface OptionalColumn extends Column {
    [optionalValue]: true;
}
export interface PrimaryKeyAutogeneratedColumn extends Column {
    [autogeneratedPrimaryKeyValue]: true;
}
export interface PrimaryKeyColumn extends Column {
    [primaryKeyValue]: true;
}
export interface ComputedColumn extends Column {
    [computedValue]: true;
}
export interface __ColumnPrivate extends __ValueSourcePrivate {
    __isColumn: true;
    __name: string;
    __table_or_view: ITableOrView<any>;
    __isOptional: boolean;
    __hasDefault: boolean;
    __isPrimaryKey: boolean;
    __isAutogeneratedPrimaryKey: boolean;
    __isComputed: boolean;
    __sequenceName?: string;
}
export declare function isColumn(value: any): value is ValueSource<TableOrViewRef<AnyDB>, undefined> & Column;
export declare function __getColumnPrivate(column: Column): __ColumnPrivate;
export declare function __getColumnOfTable(table: ITableOrView<any>, column: string): (Column & ToSql) | undefined;
