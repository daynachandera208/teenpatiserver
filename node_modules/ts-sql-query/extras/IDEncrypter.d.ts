/**
 * IDEncrypter allows to encrypt and decrypt a bigint using the aes-128-ctr
 * and complemented with some checksum validations:
 * - one checksum included inside the encrypted data
 * - a second one public, at the end of the returned string
 *
 * IDEncrypter returns a URL-safe base64-like string of 16 chars; that string
 * is composed of the chars: [A-Za-z0-9] - _ .
 * The last two chars represent a public checksum that you can validate using the
 * function isValidEncryptedID. If you copy the functions isValidEncryptedID and
 * checksumString outside of this file, you can use them in the user interface side.
 *
 * IDEncrypter constructor requires two strings of 16 chars of [A-Za-z0-9].
 * These strings work as a template for the passwords required during the encrypting
 * process. These strings are shuffles in order to generate very different encrypted
 * id even when they are sequential.
 *
 * For example, for: new IDEncrypter('3zTvzr3p67VC61jm', '60iP0h6vJoEaJo8c')
 * There are listed some numbers with the encrypted correspondent value:
 *
 *                   ID     Encrypted ID
 *                   1n uftSdCUhUTBQ0111
 *                   2n dmY1mZ8zdxsw0210
 *                   3n RYG2E7kLCEQh030b
 *                   4n YAuzxMU1mdYn0408
 *                   5n BQjHWTD6_ulK0507
 *                   6n J_BFtuk1cz1D0609
 *                   7n EHT8AO2zDvi0070d
 *                   8n pd3iGJLINuEC0811
 *                   9n Q3qCqYo7hGUP0909
 *                  10n uftSdCUhUTtQ010d
 *             1678954n VoQvLVEEAyqk280b
 *             1678955n LLdjjJzrxIEc2909
 *             1678956n w_EEBjsfTlWs2a0d
 *             1678957n hWIKAYeoyBhs2b11
 *             1678958n isfB5yGaL2Zy2c0a
 *             1678959n KPVmBdcpMaGq2d0b
 *             1678960n TP4jFWNGkf9M250c
 *             1678961n o4VoK2Eb2FMQ2608
 *             1678962n 5zI__UMdYO7d270c
 *             1678963n VoQvLVEEAzOk280e
 *             1678964n LLdjjJzrxJ4c290b
 * 9223372036854775707n bEG1TRHA6k0P5718
 * 9223372036854775708n jsh8ZwcIP43X5808
 * 9223372036854775709n atgiDIJ_-vcJ5910
 * 9223372036854775710n PloRFyQJQ2hI510c
 * 9223372036854775711n cLNdf2e01Q-U5209
 * 9223372036854775712n sw93YzZF-Exw5309
 * 9223372036854775713n H6UG5ukZZv9i5408
 * 9223372036854775714n caogdvGry6mN550c
 * 9223372036854775715n l-qteIF3fLyB560f
 * 9223372036854775716n bEG1TRHA6nIP5707
 *
 * Be aware: If you try to order the encrypted password, you will not get
 * the same order if you order the id.
 *
 * IDEncrypter support int64/long numbers generating an encrypted string
 * of 16 chars; if you introduce numbers bigger than the maximum of int64
 * (9_223_372_036_854_775_807) you will get encrypted string even longer.
 */
export declare class IDEncrypter {
    readonly password: string;
    readonly initializationVector: string;
    /**
     * Create a new password encrypter
     *
     * @param password Must be a string of 16 chars of [A-Za-z0-9]
     * @param initializationVector Must be a string of 16 chars of [A-Za-z0-9]
     */
    constructor(password: string, initializationVector: string);
    /**
     * Encrypt the ID and returns an URL-safe base64
     *
     * @param id ID to encrypt
     */
    encrypt(id: bigint): string;
    /**
     * Decrypt an ID
     *
     * @param encryptedID ID encrypted
     */
    decrypt(encryptedID: string): bigint;
    private shufflePassword;
    private shuffleIV;
}
export declare function isValidEncryptedID(encryptedID: string): boolean;
